<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Rigmarole Blog</title><link href="http://chris-lesage.github.io/" rel="alternate"></link><link href="http://chris-lesage.github.io/feeds/all.atom.xml" rel="self"></link><id>http://chris-lesage.github.io/</id><updated>2015-05-19T16:00:00-04:00</updated><entry><title>Using Edge Slide and Falloff to Fix Lip Topology in Modo</title><link href="http://chris-lesage.github.io/character-rigging/powerful-retopology-tools-in-modo/" rel="alternate"></link><published>2015-05-19T16:00:00-04:00</published><author><name>Chris Lesage</name></author><id>tag:chris-lesage.github.io,2015-05-19:character-rigging/powerful-retopology-tools-in-modo/</id><summary type="html">&lt;p&gt;Here is a new character I&amp;#8217;ve been working on. I&amp;#8217;m modelling him to be rigged and animated along with a face rig. The base sculpt and colors were done in 3D-Coat. I used voxel painting to lay in some rough colors without needing&amp;nbsp;UVs.&lt;/p&gt;
&lt;p&gt;&lt;img alt="chris_lesage_alien_turtle" src="http://chrislesage.com/wp-content/uploads/2015/05/chris_lesage_alien_turtle.gif" /&gt;&lt;/p&gt;
&lt;p&gt;Now I&amp;#8217;m taking it into Modo to do some more technical topology clean up, and I&amp;#8217;ll finish the UVs and texture maps in Modo. I&amp;#8217;m quite new to Modo, but I&amp;#8217;m already picking up some amazing new tricks, and I&amp;#8217;ll show you a bit in this&amp;nbsp;post.&lt;/p&gt;
&lt;p&gt;Some of my original rough sketches done in the online sketch tool, &lt;a href="http://www.zefrank.com/scribbler/scribblertoo/"&gt;Scribbler&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="chris_lesage_alien_turtle_sketch1" src="http://chrislesage.com/wp-content/uploads/2015/05/chris_lesage_alien_turtle_sketch1.jpg" /&gt;
&lt;img alt="chris_lesage_alien_turtle_sketch2" src="http://chrislesage.com/wp-content/uploads/2015/05/chris_lesage_alien_turtle_sketch2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;While this guy sort of resembles a turtle with his shell, I&amp;#8217;m going to make his skin translucent and colourful like a&amp;nbsp;frog.&lt;/p&gt;
&lt;h2&gt;Editing the Mouth Topology Using Edge Slide &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;Falloffs&lt;/h2&gt;
&lt;p&gt;3D-Coat has some amazing topology tools, but I find it a bit difficult to do very precise and complex operations in very small areas like the mouth cavity, lips and eyelids. I feel a lot more confident to make these changes in Modo. You have great topology tools as well, but it is well integrated with all of the snapping, falloff and modelling operations. So you can seamlessly switch between sculpting and modelling, and do things like Bridge or Bevel or&amp;nbsp;Thicken.&lt;/p&gt;
&lt;p&gt;You can even copy/paste polygons to make new geometry like eyebrows or clothes or break apart existing geometry to make big fast structural changes. (With all the powerful features of Modo, the simple ability to cut, copy and paste geometry as easily as text is one of my favourite parts of the whole&amp;nbsp;program.)&lt;/p&gt;
&lt;p&gt;First I need to make a topology fix in the corner of his&amp;nbsp;mouth.&lt;/p&gt;
&lt;p&gt;I went from this topology with square poly-turns right in the corner of his&amp;nbsp;mouth:&lt;/p&gt;
&lt;p&gt;&lt;img alt="square_mouth_topology" src="http://chrislesage.com/wp-content/uploads/2015/05/square_mouth_topology.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;To this, with a radiating pattern around the entire lips. The first version might have worked, but having the radiating rings is more flexible for making cartoony lip shapes like puckering and a small mouth &lt;span class="caps"&gt;OOH&lt;/span&gt;. Making this change was relatively easy with the Topology&amp;nbsp;Pen.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ring_mouth_topology" src="http://chrislesage.com/wp-content/uploads/2015/05/ring_mouth_topology.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;BUT&lt;/span&gt;, now there is a slow turning of the lips. The outer edge of the upper lip slowly rolls inwards, so that by the time it gets to the bottom, it is inside the mouth. I&amp;#8217;ll fix&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="bad_spinning_mouth_topology" src="http://chrislesage.com/wp-content/uploads/2015/05/bad_spinning_mouth_topology.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll use &lt;strong&gt;Edge -&amp;gt; Slide&lt;/strong&gt; to handle this. The amazing thing about Modo is that all of these poly modelling tools integrate with snapping and falloff. So you can use Linear Falloff so the Slide happens more near the center, and less towards the corner of the&amp;nbsp;mouth.&lt;/p&gt;
&lt;p&gt;&lt;img alt="modo_linear_falloff_ease_in" src="http://chrislesage.com/wp-content/uploads/2015/05/modo_linear_falloff_ease_in.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;First I drag a &lt;strong&gt;Linear Falloff&lt;/strong&gt; which you can see as a triangle with two transform gizmos in the following image. Then turn on &amp;#8220;Ease-In&amp;#8221; in the falloff&amp;#8217;s properties. Then any modelling operation I do has a nice soft&amp;nbsp;falloff.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is&amp;nbsp;powerful!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="sliding_edges_with_falloff" src="http://chrislesage.com/wp-content/uploads/2015/05/sliding_edges_with_falloff.gif" /&gt;&lt;/p&gt;
&lt;p&gt;After sliding all the edges of the lip outwards a bit, I now have some nice clean lip&amp;nbsp;topology!&lt;/p&gt;
&lt;p&gt;&lt;img alt="clean_mouth_topology" src="http://chrislesage.com/wp-content/uploads/2015/05/clean_mouth_topology.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Thanks for reading. If you want to see more posts like this including character art, skinning, rigging and Python tutorials in Modo and Maya, make sure to sign up for&amp;nbsp;updates.&lt;/p&gt;</summary><category term="3d-coat"></category><category term="art"></category><category term="characters"></category><category term="modelling"></category><category term="modo"></category></entry><entry><title>Quickly Select and Isolate Curves in Maya’s Graph Editor</title><link href="http://chris-lesage.github.io/tip-of-the-day/quickly-select-and-isolate-curves-in-mayas-graph-editor/" rel="alternate"></link><published>2014-07-31T15:45:00-04:00</published><author><name>Chris Lesage</name></author><id>tag:chris-lesage.github.io,2014-07-31:tip-of-the-day/quickly-select-and-isolate-curves-in-mayas-graph-editor/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Here is a simple but powerful animation tip in Autodesk Maya. This is an essential tip for animators and&amp;nbsp;riggers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In Maya, let&amp;#8217;s say you are working in the &lt;strong&gt;Graph Editor&lt;/strong&gt; with dozens or hundreds of objects, and you need to select and edit only the &lt;em&gt;translateY&lt;/em&gt; curves. Here is how to select them&amp;nbsp;easily.&lt;/p&gt;
&lt;p&gt;Simply select translateY in the &lt;strong&gt;Channel Box&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="select_curves_by_channel_box" src="http://chrislesage.com/wp-content/uploads/2014/07/select_curves_by_channel_box1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;It will automatically select and isolate all the translateY curves for all selected objects in the &lt;strong&gt;Graph Editor&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="select_curves_in_graph_editor" src="http://chrislesage.com/wp-content/uploads/2014/07/select_curves_by_channel_box2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;And of course, you can also use Shift to highlight multiple channels or Ctrl to remove channels from the highlighted&amp;nbsp;list.&lt;/p&gt;
&lt;p&gt;I first noticed this when I was editing 240 Driven Key curves for a mechanical prop rig. In the past I would have tediously selected all the curves in the left side channel list in the graph editor. I&amp;#8217;m not sure when this feature was added to Maya, but I only noticed it after years of doing it the slow&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;Using the Channel Box is a major time saver! Tell your&amp;nbsp;animators!&lt;/p&gt;</summary><category term="animation"></category><category term="graph-editor"></category><category term="maya"></category></entry><entry><title>“Random Enough” - Hacking Past Your Problems When Prototyping</title><link href="http://chris-lesage.github.io/tech-art/random-enough-hacking-past-your-problems-when-prototyping/" rel="alternate"></link><published>2013-11-21T15:51:00-05:00</published><author><name>Chris Lesage</name></author><id>tag:chris-lesage.github.io,2013-11-21:tech-art/random-enough-hacking-past-your-problems-when-prototyping/</id><summary type="html">&lt;p&gt;In this blog post I&amp;#8217;ll talk a bit about prototyping games or apps and moving quickly when stuck in a tricky programming&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m currently prototyping a circular puzzle game. Part of the game is about matching colors to their neighbors. I wanted a way to start the level by randomizing the blocks while having no neighboring tiles that were the same&amp;nbsp;color.&lt;/p&gt;
&lt;p&gt;&lt;img alt="random tiles example" src="http://chrislesage.com/wp-content/uploads/2013/11/random_tiles_example.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;However, I didn&amp;#8217;t want to spend the time to figure out if there was an existing algorithm to do this. I wanted to keep coding and figuring out more important mechanics to the game, so I just made a quick while loop that would keep randomly shuffling until it found&amp;nbsp;something.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The loop took a long time to run&amp;#8230; Sometimes several seconds or&amp;nbsp;more.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I realized that the while loop was sometimes going through hundreds or thousands of iterations. Now, I didn&amp;#8217;t know how to visualize how complex of a problem I was trying to solve. It could have been simple or it could have been vastly complex. My goal wasn&amp;#8217;t to visualize this problem. Instead of getting distracted on a problem whose complexity I didn&amp;#8217;t know how to guage, I decided to cobble together a quick&amp;nbsp;hack.&lt;/p&gt;
&lt;p&gt;So instead, I wrote a Lua script that ran iterations of the while loop until it found some. Then, whenever it found a true result, I simply stored those combinations in a table. I ended up only finding 13 combinations. Then when I run the game, it just chooses one out of the table randomly. (Each number represents a&amp;nbsp;color.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;shuffleTiles = {
{4, 1, 4, 1, 3, 2, 1, 3, 2, 3, 4, 2},
{2, 1, 4, 1, 4, 2, 3, 2, 3, 1, 4, 3}, 
{4, 3, 4, 3, 2, 1, 3, 2, 4, 1, 2, 1}, 
{4, 1, 3, 2, 3, 1, 2, 4, 3, 4, 1, 2},
{3, 2, 1, 4, 1, 2, 3, 4, 2, 3, 4, 1},
{2, 4, 3, 4, 2, 1, 4, 1, 3, 2, 3, 1},
{4, 2, 3, 4, 2, 1, 3, 4, 2, 1, 3, 1},
{3, 4, 1, 3, 1, 4, 2, 3, 2, 1, 4, 2},
{3, 1, 4, 3, 2, 4, 3, 4, 1, 2, 3, 2},
{4, 1, 2, 3, 1, 2, 3, 4, 1, 2, 4, 3},
{4, 1, 2, 4, 3, 1, 2, 3, 4, 3, 2, 1},
{4, 3, 1, 2, 3, 1, 3, 2, 4, 2, 4, 1},
{1, 2, 4, 3, 1, 2, 3, 4, 1, 2, 3, 4}
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since I can also rotate the board, this results in 12 x 13 = 156 starting configurations. This is much faster than running a slow algorithm at run-time (which would last for an unpredictable amount of time) and gets me back to coding the important bits. 156 combinations is enough for me to test the game&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;I call this &lt;strong&gt;&lt;em&gt;&amp;#8220;random enough&amp;#8221;&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Later on, as development continues, I can come back to solving a fast algorithm or researching if there is an existing sorting algorithm that would suit me. But if it is good enough, then I might not even need to. At this stage, my most important goal is to find a fun set of rules that results in a fun&amp;nbsp;game.&lt;/p&gt;
&lt;p&gt;This is one of the principles in &lt;a href="http://www.gamasutra.com/view/feature/2438/"&gt;&amp;#8220;How to Prototype a Game in Under 7 Days&amp;#8221;&lt;/a&gt;. &lt;strong&gt;&amp;#8220;Nobody knows how you made it, and nobody&amp;nbsp;cares.&amp;#8221;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The board-sorting is an important detail, but &lt;strong&gt;&lt;em&gt;how&lt;/em&gt;&lt;/strong&gt; it is sorted is a trivial one and it could potentially have cost me days of tinkering and research. It is fun to solve problems, and easy to get distracted in ways like this. When prototyping something new, my goal is to continue moving as fast as possible. You don&amp;#8217;t want to get stuck on one little problem when you have a whole bunch more work to&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;There are two lessons here&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If you have heavy calculations to make that result in a relatively small output, it may be better to front-load the calculations and store it as&amp;nbsp;data. &lt;/li&gt;
&lt;li&gt;Don&amp;#8217;t get stuck on side problems. Focus on the core problems. (Which for me is finding a fun game mechanic and designing the&amp;nbsp;interactions.)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#196" title="2014-05-23 18:22:33"&gt;Abhijit&lt;/a&gt;:&lt;/strong&gt; We are all guilty of falling into such traps while designing products. I agree, Random Enough is Sufficient Enough in the initial design&amp;nbsp;phase.&lt;/p&gt;</summary><category term="lua"></category><category term="mobile-games"></category><category term="programming"></category><category term="prototyping"></category><category term="techart"></category></entry><entry><title>A Manual Progress Bar in Scrivener</title><link href="http://chris-lesage.github.io/writing/a-manual-progress-bar-in-scrivener/" rel="alternate"></link><published>2013-11-18T15:45:00-05:00</published><author><name>Chris Lesage</name></author><id>tag:chris-lesage.github.io,2013-11-18:writing/a-manual-progress-bar-in-scrivener/</id><summary type="html">&lt;p&gt;In this blog post I want to show you a cool trick for making semi-graphical Status labels in the writing program Scrivener, and then explain some of the reasons you might want to do this. I used it to make a manual progress&amp;nbsp;bar.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="scrivener_status_screenshot" src="http://chrislesage.com/wp-content/uploads/2013/11/scrivener_status_screenshot.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;I use &lt;a href="http://www.literatureandlatte.com/scrivener.php"&gt;Scrivener&lt;/a&gt; and Markdown to write my blog, as well as writing documentation and training material. If you don&amp;#8217;t know, It is a structured writing program - usually used for novels, scripts, screenplays and academic writing - which can output to &lt;span class="caps"&gt;PDF&lt;/span&gt;, &lt;span class="caps"&gt;HTML&lt;/span&gt;, Markdown, LaTeX, ebook, Final Draft, Word formats and&amp;nbsp;more.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So it is also a great tool for blogging, research, course notes or technical documentation for&amp;nbsp;software.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m currently transitioning the help docs for a Maya plugin I&amp;#8217;m working on from Google Docs into Scrivener. The revisions/snapshots and structured nature of Scrivener make it ideal for documents which need frequent&amp;nbsp;updates.&lt;/p&gt;
&lt;p&gt;Scrivener already has a progress bar which is based on target word-count. That&amp;#8217;s fine if you are aiming for a particular length in a long novel or an essay with a word target. &lt;strong&gt;However, you don&amp;#8217;t always know what your target is before-hand.&lt;/strong&gt; Especially when you are writing a lot of shorter documents such a blog posts, course notes, technical documentation or training&amp;nbsp;tutorials.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I prefer having manual control.&lt;/strong&gt; So to simulate a percentage progress bar in Scrivener I created 6 &amp;#8220;Status:&amp;#8221; options using the following Unicode&amp;nbsp;characters:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: If you are setting this up, you don&amp;#8217;t have to enter the number codes. Just copy/paste the characters in &amp;#8220;Project -&amp;gt; &amp;#8220;Meta-Data Settings&amp;#8221; and then click on the &amp;#8220;Status&amp;#8221; tab. You can paste the character there to make these statuses. The numbers are there only for reference in case they aren&amp;#8217;t displaying properly in your&amp;nbsp;browser.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;▢ - White square with rounded corners
Unicode number: U+25A2

█ - Full block
Unicode number: U+2588

░ - Light shade
Unicode number: U+2591

▒ - Medium shade
Unicode number: U+2592

▢▢▢▢▢ 0%
█▢▢▢▢ 20%
██▢▢▢ 40%
███▢▢ 60%
████▢ 80%
█████ 100%
&lt;/pre&gt;

&lt;p&gt;Or if you prefer increments of&amp;nbsp;25%:&lt;/p&gt;
&lt;pre&gt;▢▢▢▢ 0%
█▢▢▢ 25%
██▢▢ 50%
███▢ 75%
████ 100%
&lt;/pre&gt;

&lt;p&gt;And some&amp;nbsp;extras:&lt;/p&gt;
&lt;pre&gt;░░░░░░░ done (published)
▒▒✘✘✘▒▒ scrapped
&lt;/pre&gt;

&lt;p&gt;&lt;a href="http://chrislesage.com/wp-content/uploads/2013/11/scrivener_unicode_status.jpg"&gt;Click here to see the image if your browser isn&amp;#8217;t displaying the unicode characters&amp;nbsp;properly.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s how this looks in Outline&amp;nbsp;mode:&lt;/p&gt;
&lt;p&gt;&lt;img alt="scrivener_unicode_screenshot" src="http://chrislesage.com/wp-content/uploads/2013/11/scrivener_unicode_screenshot.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;So Why Do&amp;nbsp;This?&lt;/h3&gt;
&lt;p&gt;Sometimes your progress depends on elements &lt;strong&gt;that are not related to the word-count&lt;/strong&gt;, such as data, graphs, multimedia elements that another designer is creating, or any other amount of tasks that may need&amp;nbsp;doing.&lt;/p&gt;
&lt;p&gt;There is also a big difference between &amp;#8220;finished writing&amp;#8221;, &amp;#8220;finished editing&amp;#8221; and &amp;#8220;ready to&amp;nbsp;publish&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Also, you may have a lot of words or notes that need a &lt;span class="caps"&gt;LOT&lt;/span&gt; of editing. Your rough notes shouldn&amp;#8217;t necessarily count towards your progress. Maybe you will write 5000 words just to edit it down to 2500. Some days you will end up with less words, &lt;strong&gt;but you are still technically making forward&amp;nbsp;progress.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So using &amp;#8220;Status&amp;#8221; graphically is a way to &lt;strong&gt;manually&lt;/strong&gt; set your progress, in a sort of eye-catching&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;You can also sort by status with this. The black bars go in the correct order, and the &amp;#8220;done&amp;#8221; and &amp;#8220;scrapped&amp;#8221; shaded bars go to the bottom, but above&amp;nbsp;0%.&lt;/p&gt;
&lt;p&gt;If you want to search for other unicode characters that you can use, &lt;a href="http://unicode-table.com/"&gt;check out this unicode website&lt;/a&gt;. You can also copy/paste a character into this website to find out the unicode&amp;nbsp;value.&lt;/p&gt;
&lt;p&gt;I bet you can think of some other ideas to make some graphical reminders or just make your status labels more meaningful to you. Give it a try and let me know what you think in the&amp;nbsp;comments.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#98" title="2013-11-19 10:24:05"&gt;Chris Lesage&lt;/a&gt;:&lt;/strong&gt; Hey everyone. I got a few comments asking to be more specific about how to set this up. Here are some more detailed steps if you want to set this up in Scrivener. Note: All you have to do is copy and paste the unicode characters directly. &lt;strong&gt;You don&amp;#8217;t have to enter the number code&amp;nbsp;anywhere.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Copy (Ctrl-C) the squares from my post or from&amp;nbsp;unicode-table.com&lt;/li&gt;
&lt;li&gt;In the Scrivener menubar go to &amp;#8220;Project&amp;#8221; -&amp;gt; &amp;#8220;Meta-Data Settings&amp;#8221; and then click on the &amp;#8220;Status&amp;#8221; tab. This is where you can add your own custom Labels and Statuses or arbitrary&amp;nbsp;meta-data.&lt;/li&gt;
&lt;li&gt;Hit the &amp;#8220;+&amp;#8221; button to add a new Status and paste (Ctrl-V) the special characters right there. The unicode numbers were just there for reference in case the graphics weren&amp;#8217;t showing up properly on anybody&amp;#8217;s&amp;nbsp;computer.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#106" title="2013-12-14 05:09:05"&gt;Chloe Carson&lt;/a&gt;:&lt;/strong&gt; Hey this is fantastic, thanks so much! I imagine I could use these on Squarespace as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#101" title="2013-11-27 13:07:31"&gt;ady coles&lt;/a&gt;:&lt;/strong&gt; Hi Chris, This is great! If you don&amp;#8217;t mind, i would like to include a link to this article from my &amp;#8216;scrivener resources&amp;#8217; page. (http://acol.es/stScrivener)&amp;nbsp;Ady&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#102" title="2013-11-27 13:33:22"&gt;Chris Lesage&lt;/a&gt;:&lt;/strong&gt; Hi Ady, yes please feel free. Thanks for the&amp;nbsp;comment.&lt;/p&gt;</summary><category term="scrivener"></category><category term="tools"></category><category term="writing"></category></entry><entry><title>Maya Python: Reset Selected Controls</title><link href="http://chris-lesage.github.io/python/maya-python-reset-selected-controls/" rel="alternate"></link><published>2013-10-01T21:54:00-04:00</published><author><name>Chris Lesage</name></author><id>tag:chris-lesage.github.io,2013-10-01:python/maya-python-reset-selected-controls/</id><summary type="html">&lt;p&gt;&lt;img alt="Reset Selected Script" src="http://chrislesage.com/wp-content/uploads/2013/10/reset_selected_script.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;I have a script snippet to share with you today. This is how I quickly reset all selected objects to 0,0,0,0,0,0,1,1,1 in translate, rotate and scale with the stroke of a hotkey&amp;nbsp;command.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is fantastically useful when you are animating!&lt;/strong&gt; But it&amp;#8217;s also for riggers, modellers or anyone working in Maya. Softimage &lt;span class="caps"&gt;XSI&lt;/span&gt; has this feature built in (Ctrl-Shift-R), so I made a little snippet to do the same in&amp;nbsp;Maya.&lt;/p&gt;
&lt;p&gt;First I&amp;#8217;ll show the simple code, explicitly written for each attribute. And then for the Python fans, I&amp;#8217;ll show how to shorten it using List Comprehension because why not? After the scripts, I&amp;#8217;ll explain a bit more how it works. &lt;strong&gt;If you just want the script, just copy/paste this and use it. If you want to geek out about List Comprehension and PyMEL, read&amp;nbsp;on&amp;#8230;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Reset Selected: The simple&amp;nbsp;version&lt;/h3&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pymel.core&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pm&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reset_selected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oColl&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;oNode&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;oColl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;oNode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;oNode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ty&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;oNode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;oNode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;oNode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;oNode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;oNode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;oNode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;oNode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;runthescipt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reset_selected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;runthescipt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;Reset Selected: The Fancy List Comprehension&amp;nbsp;Version&lt;/h3&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pymel.core&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pm&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reset_selected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oColl&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;trList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.tx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.ty&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.tz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.rx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.ry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.rz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;sList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.sx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.sy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.sz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# o is each object, x is each attribute&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;oColl&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;trList&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;oColl&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sList&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;runthescipt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reset_selected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;runthescipt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;Notes about this&amp;nbsp;script:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fully supports undo and redo&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;There are 2 scripts below. Grab either one. &lt;strong&gt;They do the same thing&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Set it to &lt;strong&gt;&lt;em&gt;Ctrl-Shift-R&lt;/em&gt;&lt;/strong&gt; in your Maya hotkey editor. Don&amp;#8217;t forget to set the hotkey to&amp;nbsp;Python.&lt;/li&gt;
&lt;li&gt;I personally use PyMEL instead of maya.cmds because it can generate a list of object pointers rather than strings, so it is a lot easier to use from an &lt;span class="caps"&gt;OOP&lt;/span&gt; point of view. Some studios do not use PyMEL, so be aware of&amp;nbsp;this.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The pm.Callback() takes an argument&lt;/strong&gt;, so instead of pm.selected() you could pass it a list of all your character rig controls, or all the locators in your scene, etc.&amp;nbsp;etc.&lt;/li&gt;
&lt;li&gt;Every iteration has a try/except on it, so that if your attribute is driven or locked the script will continue without&amp;nbsp;failing.&lt;/li&gt;
&lt;li&gt;You can also use makeIdentity() to quickly reset an object, but if some of your attributes are locked, this won&amp;#8217;t&amp;nbsp;work.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How list comprehension&amp;nbsp;works:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" title="List Comprehension documentation"&gt;List Comprehension&lt;/a&gt; lets you build up lists quickly by using [x for x in&amp;nbsp;y]&lt;/li&gt;
&lt;li&gt;But you can also loop over two lists at once with one line:&lt;br /&gt;
    [(x + y) for x in (1,2,3) y in&amp;nbsp;(4,5,6)]&lt;/li&gt;
&lt;li&gt;This acts like a nested iterator which will add each of (1,2,3) with each of (4,5,6) resulting in 9 combinations. (1+4, 1+5, 1+6, 2+4, 2+5, and so&amp;nbsp;on&amp;#8230;)&lt;/li&gt;
&lt;li&gt;I then take those two combined elements to gather all the transform attributes for all of my&amp;nbsp;objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How pm.Attribute&amp;nbsp;works:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I&amp;#8217;m iterating over two lists with my list comprehension so I need to combine it again, casting it as a pm.Attribute( object name + attribute&amp;nbsp;).&lt;/li&gt;
&lt;li&gt;However, if you were explicitly setting an attribute it would be as simple as&amp;nbsp;yourObject.tx.set(0)&lt;/li&gt;
&lt;li&gt;You could also create your attribute in the list comprehension, but if you try and run the script on a shape node that has no attributes, then the script will&amp;nbsp;fail.&lt;/li&gt;
&lt;li&gt;You could get around this by including a try/except function inside the list comprehension or by filtering your objects for transform nodes only, but that is just becoming too complex for this little&amp;nbsp;script.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;In&amp;nbsp;Summary&lt;/h2&gt;
&lt;p&gt;I use this hotkey all the time! I missed it from Softimage. Your animators are going to love using it too! Feel free to use it, and if you find bugs, improve it or rewrite it in &lt;span class="caps"&gt;MEL&lt;/span&gt; or maya.cmds let us know in the comments.&amp;nbsp;Thanks!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#86" title="2013-11-06 23:47:39"&gt;Markus Daum&lt;/a&gt;:&lt;/strong&gt; nice one! :) here&amp;#8217;s a simple maya commands&amp;nbsp;version&amp;#8230; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.cmds&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;mc&lt;/span&gt;

&lt;span class="n"&gt;attrVsDefaultValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ty&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;sel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;attrVsDefaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;attrVsDefaultValue&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cheers!&amp;nbsp;-Markus&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#88" title="2013-11-07 13:50:38"&gt;Chris Lesage&lt;/a&gt;:&lt;/strong&gt; Thanks Markus! Your version also respects undo/redo. I&amp;#8217;ll have to take a look at mine and remember why I used Callback. :) (Also, it looks like my comments don&amp;#8217;t keep tabs in the formatting. I&amp;#8217;ll see if I can sort that out.&amp;nbsp;Fixed.)&lt;/p&gt;</summary><category term="animtip"></category><category term="hotkeys"></category><category term="maya"></category><category term="pymel"></category><category term="python"></category><category term="rigtip"></category></entry><entry><title>The Fastest Way to Search API and Help Docs</title><link href="http://chris-lesage.github.io/rigging-tutorials/fastest-way-to-search-api-help-docs/" rel="alternate"></link><published>2013-09-24T20:21:00-04:00</published><author><name>Chris Lesage</name></author><id>tag:chris-lesage.github.io,2013-09-24:rigging-tutorials/fastest-way-to-search-api-help-docs/</id><summary type="html">&lt;p&gt;You probably frequently visit at least one or two &lt;span class="caps"&gt;API&lt;/span&gt; documentation, help docs or reference websites when you are programming or learning a new language or software. Firefox and Chrome have a trick to use a custom search keyword in the location bar to quickly navigate &lt;span class="caps"&gt;API&lt;/span&gt; docs or any other frequently searched sites. If you take a few minutes to set this up, it will save you a lot of time and keystrokes, I&amp;nbsp;promise.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://chrislesage.com/wp-content/uploads/2013/09/custom-search-api.jpg" alt="custom-search-api" width="433" height="93" class="alignnone size-full wp-image-473" /&gt;&lt;/p&gt;
&lt;p&gt;So for example, when I want to search the Maya PyMEL docs, all I have to type is &amp;#8220;pm setTransformation&amp;#8221; in the location bar and Chrome brings me directly to the search results in the PyMEL&amp;nbsp;documentation.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t have to Google first. I don&amp;#8217;t have to click a bookmark and then find the search box first. I just search and I&amp;#8217;m&amp;nbsp;there.&lt;/p&gt;
&lt;h2&gt;Here&amp;#8217;s how to set that&amp;nbsp;up.&lt;/h2&gt;
&lt;p&gt;First browse to your most frequently used help documentation and &lt;strong&gt;do a search for anything&lt;/strong&gt;. You just want to be able to find the url of the search results so you can replace it with&amp;nbsp;&amp;#8220;%s&amp;#8221;. &lt;/p&gt;
&lt;h3&gt;Template &lt;span class="caps"&gt;URL&lt;/span&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;http://yoursite/search.html?q= &lt;strong style="color:red;"&gt;your_search_term&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;http://yoursite/search.html?q=&lt;strong style="color:red;"&gt;%s&lt;/strong&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Google&amp;nbsp;Chrome&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Copy&lt;/strong&gt; the url of your&amp;nbsp;search&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;change the search query to &amp;#8220;%s&amp;#8221;&lt;/strong&gt; (examples&amp;nbsp;below.)&lt;/li&gt;
&lt;li&gt;In the &lt;span class="caps"&gt;URL&lt;/span&gt; bar, &lt;strong&gt;right click&lt;/strong&gt; and click &amp;#8220;&lt;strong&gt;Edit Search Engines&amp;#8230;&lt;/strong&gt;&amp;#8221;&lt;/li&gt;
&lt;li&gt;Under &amp;#8220;&lt;strong&gt;Other Search Engines&lt;/strong&gt;&amp;#8220;, scroll to the bottom where you can enter your&amp;nbsp;info.&lt;/li&gt;
&lt;li&gt;Enter a &lt;strong&gt;name&lt;/strong&gt;, a unique &lt;strong&gt;keyword&lt;/strong&gt; to trigger the search and then &lt;strong&gt;your %s &lt;span class="caps"&gt;URL&lt;/span&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Firefox&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Copy&lt;/strong&gt; the url of your&amp;nbsp;search&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;change the search query to &amp;#8220;%s&amp;#8221;&lt;/strong&gt; (examples&amp;nbsp;below.)&lt;/li&gt;
&lt;li&gt;Under &amp;#8220;Bookmarks&amp;#8221; click &amp;#8220;&lt;strong&gt;Show All Bookmarks&lt;/strong&gt;&amp;#8221; or hit&lt;strong&gt; Ctrl-Shift-B&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Right click&lt;/strong&gt; in the bookmarks area and click &amp;#8220;&lt;strong&gt;New Bookmark&lt;/strong&gt;&amp;#8221;&lt;/li&gt;
&lt;li&gt;Enter a &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;your %s &lt;span class="caps"&gt;URL&lt;/span&gt;&lt;/strong&gt;, optional tags, and a &lt;strong&gt;keyword&lt;/strong&gt; to trigger the&amp;nbsp;search.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Some examples for the search term&amp;nbsp;&amp;#8220;matrix&amp;#8221;:&lt;/h2&gt;
&lt;h3&gt;Unity3D Scripting&amp;nbsp;Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;http://docs.unity3d.com/Documentation/ScriptReference/30_search.html?q=&lt;strong style="color:red;"&gt;matrix&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;http://docs.unity3d.com/Documentation/ScriptReference/30_search.html?q=&lt;strong style="color:red;"&gt;%s&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;keyword:&lt;/strong&gt; assign a unique keyword or acronym. Just don&amp;#8217;t pick a word you would use in a regular search: Perhaps &amp;#8220;un&amp;#8221; for&amp;nbsp;Unity3D.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Maya&amp;nbsp;PyMEL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;http://download.autodesk.com/global/docs/maya2014/en_us/PyMel/search.html?q=&lt;strong style="color:red;"&gt;matrix&lt;/strong&gt;&amp;amp;check_keywords=yes&amp;amp;area=default&lt;/li&gt;
&lt;li&gt;http://download.autodesk.com/global/docs/maya2014/en_us/PyMel/search.html?q=&lt;strong style="color:red;"&gt;%s&lt;/strong&gt;&amp;amp;check_keywords=yes&amp;amp;area=default&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;keyword:&lt;/strong&gt; I use &amp;#8220;pm&amp;#8221; for&amp;nbsp;PyMEL&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Stack&amp;nbsp;Overflow&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;http://stackoverflow.com/search?q=&lt;strong style="color:red;"&gt;matrix&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;http://stackoverflow.com/search?q=&lt;strong style="color:red;"&gt;%s&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;keyword:&lt;/strong&gt; &amp;#8220;sto&amp;#8221; for Stack Overflow (the keyword isn&amp;#8217;t triggered until you hit spacebar, so you would still be able to type &amp;#8220;storage&amp;#8221; for example, and you still have the option to search Google for &amp;#8220;sto foobar&amp;#8221; if you click down&amp;nbsp;twice.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Google&amp;nbsp;Groups&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;https://groups.google.com/forum/#!search/&lt;strong style="color:red;"&gt;matrix&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;https://groups.google.com/forum/#!search/&lt;strong style="color:red;"&gt;%s&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;keyword:&lt;/strong&gt; &amp;#8220;gg&amp;#8221; for Google Groups. Whatever is easy for you to&amp;nbsp;remember.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;In&amp;nbsp;Summary&amp;#8230;&lt;/h2&gt;
&lt;p&gt;Now you type your keyword followed by whatever you want to search for and it will directly bring you to the search results on that page. (And once you are on the page, don&amp;#8217;t forget the Ctrl-F hotkey!) This will make you look like a fast-browsing maniac to anyone watching over your&amp;nbsp;shoulder.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#79" title="2013-09-27 14:08:49"&gt;Sune&lt;/a&gt;:&lt;/strong&gt; Nice one! Alas this does not seem to work for any of the autodesk native online&amp;nbsp;documentation&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#80" title="2013-09-27 14:38:07"&gt;Chris Lesage&lt;/a&gt;:&lt;/strong&gt; Sune, that is true because they use frames. But you can try this tip from Benedict Apuna and use a mix of Custom Search + Google Site Search: Add &amp;#8220;site:&amp;#8221; to the front and put a space between %s. Don&amp;#8217;t forget to remove the final &amp;#8220;whatever.html&amp;#8221; from your template url. &lt;strong&gt;Maya &lt;span class="caps"&gt;API&lt;/span&gt;:&lt;/strong&gt; &amp;#8220;site:docs.autodesk.com/&lt;span class="caps"&gt;MAYAUL&lt;/span&gt;/2013/&lt;span class="caps"&gt;ENU&lt;/span&gt;/Maya-&lt;span class="caps"&gt;API&lt;/span&gt;-Documentation &lt;strong&gt;%s&lt;/strong&gt;&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#81" title="2013-09-27 15:04:19"&gt;Tyler Hurd&lt;/a&gt;:&lt;/strong&gt; Awesome. Wish I had known about this years&amp;nbsp;ago.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#83" title="2013-09-29 08:57:41"&gt;Mayur&lt;/a&gt;:&lt;/strong&gt; very nice trick thanks a lot&amp;nbsp;!!&lt;/p&gt;</summary><category term="api"></category><category term="programming"></category><category term="tools"></category><category term="rigging"></category></entry><entry><title>A New Demoreel &amp; My Cartoony Face Rig Structure</title><link href="http://chris-lesage.github.io/character-rigging/new-demoreel-and-face-rig-structure/" rel="alternate"></link><published>2013-09-09T15:11:00-04:00</published><author><name>Chris Lesage</name></author><id>tag:chris-lesage.github.io,2013-09-09:character-rigging/new-demoreel-and-face-rig-structure/</id><summary type="html">&lt;p&gt;I just got back from an awesome summer vacation, travelling in South America! Now I&amp;#8217;m back to work, developing some new Python animation tools and plugins (which I&amp;#8217;ll blog about soon) and looking for new clients and projects for the coming year! Today I want to show you my new character rigging demoreel. It has a few highlights of my tech artist work from this past year. After the video, you&amp;#8217;ll read a bit about the facial rig that I developed with help from Rigging Dojo for a cartoon feature&amp;nbsp;film.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In this&amp;nbsp;demoreel:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Character rigging for Ember Lab&amp;#8217;s successfully Kickstarter-funded indie film, &lt;a href="http://www.dustthefilm.com/"&gt;Dust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cartoony face rigging for an animated feature&amp;nbsp;film&lt;/li&gt;
&lt;li&gt;Cinematics from a Coca-Cola mobile game I worked on (I also did some in-game rigs for a Maya/Unity&amp;nbsp;workflow.)&lt;/li&gt;
&lt;li&gt;Some rigging goodies like the cylindrical foot-roll I blogged about, and an auto-swinging trunk/tail&amp;nbsp;rig.&lt;/li&gt;
&lt;li&gt;Some footage from some mobile game prototypes I&amp;#8217;m developing in Corona and&amp;nbsp;Unity3D.&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/lBV4AaugXG4?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3&gt;The &amp;#8220;Face Plates&amp;#8221;&amp;nbsp;Rig&lt;/h3&gt;
&lt;p&gt;The cartoony face rig I developed was really interesting. I based it off of some of the principles from &amp;#8220;&lt;a href="https://disney-animation.s3.amazonaws.com/uploads/production/publication_asset/52/asset/hybridFacialTalk.pdf"&gt;A Hybrid Approach to Facial Rigging&lt;/a&gt;&amp;#8220;. And I took a session of &lt;a href="http://riggingdojo.com"&gt;Rigging Dojo&lt;/a&gt; where Brad Clark and the Dojo community really helped me push the quality of the&amp;nbsp;rig.&lt;/p&gt;
&lt;p&gt;The face rig needed to be flexible and expressive, but it also needed to be fast to setup and swap between characters. There was a large cast of characters, and I started the project alone. Eventually we hired a second rigger, but the process had to be modular and stream-lined. In the past, my face rigs would have used dozens of blendshapes, based on Stop Staring. But in this production we had a &lt;span class="caps"&gt;LOT&lt;/span&gt; of modelling revisions, client feedback and a small&amp;nbsp;team!&lt;/p&gt;
&lt;h3&gt;The process had to be simple and&amp;nbsp;fast.&lt;/h3&gt;
&lt;p&gt;So we had to have a solution that didn&amp;#8217;t have a lot of brute-force work for each character, such as requiring too many corrective blendshapes which would have to be re-done or tweaked with each modelling revision. I kept the amount of blendshapes down to only 8-10 per character, for special things like puckering and &amp;#8220;ewww&amp;#8221; shapes. My solution was something I called &amp;#8220;Face Plates&amp;#8221;. Using a series of nurbs surfaces which are shaped to match the curvature of the character&amp;#8217;s&amp;nbsp;face.&lt;/p&gt;
&lt;p&gt;&lt;img alt="face_rig_face_plates1" src="http://chrislesage.com/wp-content/uploads/2013/09/face_rig_face_plates1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The curvature of the plate is controlled by two blendshapes. By combining the two shapes, they can be concave, convex or saddle-shaped. Using follicles and geometry-based constraints, a joint follows the curvature of the nurbs, giving an effect of sliding over a rounded&amp;nbsp;structure.&lt;/p&gt;
&lt;p&gt;&lt;img alt="face_plates_curve" src="http://chrislesage.com/wp-content/uploads/2013/09/face_plates_curve.gif" /&gt;&lt;/p&gt;
&lt;p&gt;The animator uses the controller in X and Y, and you get a nice natural curved effect with less effort. Using the controller in Z lets you pull the skin off of the surface if you need&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;&lt;img alt="face_rig_face_plates2" src="http://chrislesage.com/wp-content/uploads/2013/09/face_rig_face_plates2.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;The advantages I found with this&amp;nbsp;system&amp;#8230;&lt;/h3&gt;
&lt;p&gt;You could also use a single object like in the &amp;#8220;Hybrid Approach to Facial Rigging&amp;#8221;. But by having separate pieces, you have a few&amp;nbsp;advantages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Place them to match the face in a fairly complex way very quickly with only a few parameters and without having to do any&amp;nbsp;modelling. &lt;/li&gt;
&lt;li&gt;Constrain the plates to the rig controllers or add Driven Keys for an additional layer of&amp;nbsp;complexity/expression. &lt;/li&gt;
&lt;li&gt;Have 1 controller moving concave while a nearby one moves convex for creating overlapping or fat-bulging effects with only standard&amp;nbsp;skinning. &lt;/li&gt;
&lt;li&gt;Easily make or remove plates to create a custom character. In this way we were able to use the same basic rig to also rig cartoony animals with completely different&amp;nbsp;proportions. &lt;/li&gt;
&lt;li&gt;The size of the plates gives your joints a natural limit, preventing the animators from breaking&amp;nbsp;model. &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;A Simple Skin-Based Method for Fast&amp;nbsp;Setup&lt;/h3&gt;
&lt;p&gt;But the best thing about this approach is the simplicity of the skinning. By using joints to skin the face, when the clients asked for modelling revisions, it was simply a matter of adjusting the positions of the Face Plates, and then transferring the weights to the new geometry without too much pain and re-modelling of blendshapes. This also made it fast and easy to setup new characters. Animation could even be swapped between characters, though it would take some tweaking afterwards. (In the future I&amp;#8217;d like to figure out how to re-target the animation. The translation, scale and curvature of the plates holds information about the characters&amp;nbsp;proportions.)&lt;/p&gt;
&lt;p&gt;I then set up a face panel which controls large expressive motions on the face for quickly blocking out poses. And then the controllers on the face allow the animators to make more fine-tuned adjustments. Again, 90% of the face rig is done through placing the Face Plates and using regular skinning. Other than that, the head squash-and-stretch uses a&amp;nbsp;lattice.&lt;/p&gt;
&lt;p&gt;Do you have any questions or feedback? Do you have any favourite examples of face rigging systems? Share them in the&amp;nbsp;comments.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#77" title="2013-09-13 16:05:26"&gt;Chris Lesage&lt;/a&gt;:&lt;/strong&gt; Great link, thanks Jamie! I had the .mp3 of this talk from &lt;span class="caps"&gt;GDC&lt;/span&gt;, but this is much&amp;nbsp;better.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#73" title="2013-09-09 19:49:39"&gt;Jason Campbell&lt;/a&gt;:&lt;/strong&gt; This looks like a really strong and flexible system. Are the plate blendshapes used to speed up the initial setup in matching the model curvature or are they driven by the controllers in posing to modify the underlying geometry? Dare I hope for a full tutorial sometime in the future? Thanks,&amp;nbsp;J.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#74" title="2013-09-09 20:39:05"&gt;Chris Lesage&lt;/a&gt;:&lt;/strong&gt; Hi Jason, They are just to speed up the setup. I connect the blendshapes via 2 parameters in the channel box of the nurbs surface, so I can quickly translate and curve it without fussing with the blendshape node. Our characters were nice and round, so these 2 shapes were good enough to match the geometry. Using the curvature to drive the geometry is an interesting idea though! I&amp;#8217;d be happy to write about this more in depth later on. There are some other tricks I didn&amp;#8217;t mention, like using 2 joints for each controller, one that doesn&amp;#8217;t follow the Z-translation of the controller. So for example you can have a nice round shaped cheek bulge when you pull in Z on one joint, but include a wider, softer influence on the other joint which could give you nice soft motion up near the eyes when moving the cheek in X and Y. (That might not make any sense without a picture or a video!&amp;nbsp;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#75" title="2013-09-12 07:30:37"&gt;Debster&lt;/a&gt;:&lt;/strong&gt; You are awesome.&amp;nbsp;&amp;lt;3&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#76" title="2013-09-13 09:37:31"&gt;Jamie&lt;/a&gt;:&lt;/strong&gt; Cool bro! good to see someone else also using nurbs surfaces for sliding joints.. I&amp;#8217;ve been using this trick for a few years for face rigs.. I like to call it High Fidelity Facial Rigging.. I just place all the surfaces I want and run a script to setup everything.. but I got the idea originally from David Hunt from Bungie.. in a publication &amp;#8216;Modular Procedural Rigging&amp;#8217; on their website.. http://halo.bungie.net/inside/publications.aspx check it out.. some really cool stuff in there.. Good work mate!&amp;nbsp;Jamie&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#203" title="2014-06-06 08:39:51"&gt;Marley Kudiabor&lt;/a&gt;:&lt;/strong&gt; Hello Chris, I recently have been doing nothing but this setup and wanted to know if you are still using it at all or if you have transitioned into any other interesting setups. I have used this setup almost exclusively and it works great especially for closing large almond shaped almost &amp;#8220;anime&amp;#8221; style eyes if you use spheres and love it, I also used it for a realistic character and it worked out great there as well. I just wanted to know if you had any other setups to share. Many&amp;nbsp;thanks&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#204" title="2014-06-06 13:43:32"&gt;Chris Lesage&lt;/a&gt;:&lt;/strong&gt; Hey Marley. I&amp;#8217;m working mostly on props and Python tools this year, so I&amp;#8217;ve only done a few faces. Glad you enjoy the setup.&amp;nbsp;Cheers!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#256" title="2014-10-17 19:15:21"&gt;sufiyan&lt;/a&gt;:&lt;/strong&gt; Hi Chris, I&amp;#8217;m seeking tips and tricks on particular scene in which I&amp;#8217;m rigging a bear who is literary going to strip off his upper fur skin like any jacket or coat. So bit concerned about how to approach it. Please do you have any suggestions or idea for this. Let me know&amp;#8230; Thanking&amp;nbsp;you&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#257" title="2014-10-17 19:23:19"&gt;Chris Lesage&lt;/a&gt;:&lt;/strong&gt; haha, gross! When you are trying to solve complex deformations like this, sometimes it helps to consider it in layers. So for example, could you make a version of the face that is flattened out in 2D, and then create a peeling effect on that flat face? &lt;span class="caps"&gt;THEN&lt;/span&gt;, you could create a blend shape or a deformer that wraps the flat face onto the 3D shape of the face. That might not work specifically. But the main idea is to think of it in layers if you can. Put the most complex deformation on the most simple geometry that you can define, and then deform the simple geometry into a more complex shape. Does that give you any ideas? I&amp;#8217;d love to see what you come up&amp;nbsp;with.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#260" title="2014-10-18 19:24:13"&gt;sufiyan&lt;/a&gt;:&lt;/strong&gt; Hi again, I appreciate your suggestion and tips. The idea of flattened faces is seeming to be little workable in which I might wrap simplified mesh with original mesh but in my scene he is going to roll the cloth after striping off as well as I was planning to use proxy rig set up within same bear rig for upper furry skin or else could make separate version of rig for furry skin and combine it scene&amp;#8230;but both method will gonna hectic and challenging, however thank you for your feed&amp;nbsp;back&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#261" title="2014-10-18 19:29:27"&gt;sufiyan&lt;/a&gt;:&lt;/strong&gt; One more thing how it would be if I use sticky lips kind deformer for opening part of furry skin&amp;#8230;will it be fine for&amp;nbsp;this&amp;#8230;&lt;/p&gt;</summary><category term="demoreel"></category><category term="face-rigging"></category><category term="maya"></category><category term="python"></category><category term="softimage"></category></entry><entry><title>Manually Create a Single Maya Follicle in Python</title><link href="http://chris-lesage.github.io/character-rigging/manually-create-maya-follicle-in-python/" rel="alternate"></link><published>2013-02-22T00:00:00-05:00</published><author><name>Chris Lesage</name></author><id>tag:chris-lesage.github.io,2013-02-22:character-rigging/manually-create-maya-follicle-in-python/</id><summary type="html">&lt;p&gt;Do you use Maya follicles to pin objects to your geometry? Are you still doing it the old way, by creating a Hair System and then deleting all the parts you don&amp;#8217;t need? Below I&amp;#8217;ll share my simple Maya Python script that creates and pins a single follicle onto a nurbs surface. (&lt;a href="#folliclescript"&gt;Jump straight to the script.&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I love using follicles. They adhere to a nurbs or poly surface and they maintain a good, predictable orientation in normal and tangent space, which means they don&amp;#8217;t shift or rotate and they don&amp;#8217;t need additional up-vector constraints. It is a great and predictable way to pin things to your&amp;nbsp;geometry.&lt;/p&gt;
&lt;h2&gt;How you can use&amp;nbsp;follicles:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create a flip-free &amp;#8220;Ribbon &lt;span class="caps"&gt;IK&lt;/span&gt;&amp;#8221; for spines, tentacles or cartoon limbs without needing a ton of up-vector&amp;nbsp;constraints!&lt;/li&gt;
&lt;li&gt;Attach a boat to a flowing water&amp;nbsp;surface&lt;/li&gt;
&lt;li&gt;Rivet buttons or patches onto&amp;nbsp;clothing&lt;/li&gt;
&lt;li&gt;Rivet some controllers to one layer of your character, so you can adjust a second layer. (Imagine a character with a scarf around their&amp;nbsp;neck.)&lt;/li&gt;
&lt;li&gt;Slide facial controls along an underlying &amp;#8220;skull&amp;#8221; object or create other skin sliding&amp;nbsp;effects.&lt;/li&gt;
&lt;li&gt;Measure the distance between two points (even if there is no vertex where you want to measure) on geometry, even if is being deformed in many different&amp;nbsp;ways.&lt;/li&gt;
&lt;li&gt;Arvid Schneider&amp;#8217;s video shows us how we can use follicles as a great way to pin things to different types of meshes &lt;a href="http://lesterbanks.com/2012/08/using-maya-hair-follicles-for-parenting-constraining-geometry-to-a-surface/"&gt;http://lesterbanks.com/2012/08/using-maya-hair-follicles-for-parenting-constraining-geometry-to-a-surface/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the past, I would create the follicles by creating a hair system and then delete everything except the follicles. When I went to script this, I found it was difficult to access the hair system with Python and PyMEL. So instead I wrote this PyMEL snippet which lets you create a single follicle manually. It sets up all the same connections but the hair system never gets created. (I am only supporting nurbs surfaces in this script, because if you use polygons, you need to have UVs on the mesh, and the follicle will act unpredictably depending on how clean your UVs&amp;nbsp;are.) &lt;/p&gt;
&lt;h2&gt;Setting Things&amp;nbsp;Up&lt;/h2&gt;
&lt;p&gt;Before we get to the script, I just want to point out how I use this. I &lt;strong&gt;never&lt;/strong&gt; pin follicles directly on to my polygon characters.&amp;nbsp;Why?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Because if your geometry changes, you have to disconnect and then reconnect&amp;nbsp;everything&lt;/li&gt;
&lt;li&gt;If the UVs get changed, the position of the follicle will change. If your UVs aren&amp;#8217;t clean, predicting where the follicle will travel is nearly&amp;nbsp;impossible.&lt;/li&gt;
&lt;li&gt;By using nurbs, you have a nice clean 0 to 1 &lt;span class="caps"&gt;UV&lt;/span&gt; space, which is nice and easy for setting up Driven Keys or distributing multiple follicles in an even row. (Plus you know that 0.5 is precisely the&amp;nbsp;middle.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So what I do instead is&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="using_nurbs_for_follicle_placement" src="http://chrislesage.com/wp-content/uploads/2013/02/using_nurbs_for_follicle_placement-e1382696561574-286x300.jpg" /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;create a small nurbs plane, big enough that will cover the area I want to work&amp;nbsp;with.&lt;/li&gt;
&lt;li&gt;give it 2-6 patches, depending on how much it will have to deform. (2 often&amp;nbsp;works.)&lt;/li&gt;
&lt;li&gt;Bend it and place it so it roughly matches the shape of your character&amp;#8217;s&amp;nbsp;geometry.&lt;/li&gt;
&lt;li&gt;Skin it with the same joints as your character and copy weights. (If you have any other deformers or blendshapes, you will need to match those too.) This way you can safely and easily change your character&amp;#8217;s geometry without losing all your follicle work. (This is a common occurrence in production. Never assume your geometry is final.)&lt;a id="folliclescript"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Here is the&amp;nbsp;script&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pymel.core&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pm&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_follicle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oNurbs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uPos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vPos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# manually place and connect a follicle onto a nurbs surface.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;oNurbs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;transform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;oNurbs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;oNurbs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getShape&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;oNurbs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nurbsSurface&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Warning: Input must be a nurbs surface.&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="c1"&gt;# create a name with frame padding&lt;/span&gt;
    &lt;span class="n"&gt;pName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;oNurbs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;follicle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zfill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="n"&gt;oFoll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;follicle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;oNurbs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oFoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inputSurface&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# if using a polygon mesh, use this line instead.&lt;/span&gt;
    &lt;span class="c1"&gt;# (The polygons will need to have UVs in order to work.)&lt;/span&gt;
    &lt;span class="c1"&gt;#oMesh.outMesh.connect(oFoll.inMesh)&lt;/span&gt;

    &lt;span class="n"&gt;oNurbs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;worldMatrix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oFoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inputWorldMatrix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;oFoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outRotate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oFoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getParent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;oFoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outTranslate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oFoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getParent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;oFoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parameterU&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uPos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;oFoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parameterV&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vPos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;oFoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getParent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;oFoll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getParent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;oFoll&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; To use the script, select a nurbs surface in Maya and run this line. Set the U and V parameters as you&amp;nbsp;wish:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;oFoll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_follicle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to create a bunch of follicles evenly spread along a long nurbs plane, use something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;myObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;howManyFollicles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;howMany&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;oFoll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_follicle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;howManyFollicles&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.00&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Thanks For&amp;nbsp;Reading&lt;/h2&gt;
&lt;p&gt;Share in the comments if you have used follicles to solve your rigging or animation&amp;nbsp;problems!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#64" title="2013-02-26 13:09:00"&gt;Chris Lesage&lt;/a&gt;:&lt;/strong&gt; Hi Marco, Thanks. Some of the rivet plugins I&amp;#8217;ve seen come with very nice features too. I&amp;#8217;ve used hundreds of follicles in some rigs (for a long tentacled creature for example) and I&amp;#8217;ve found that by bypassing the Hair System I don&amp;#8217;t see any significant performance hit. And all of the extra attributes associated with hair can be deleted since they aren&amp;#8217;t connected to anything. (except U and&amp;nbsp;V.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#63" title="2013-02-26 07:49:44"&gt;Marco Giordano&lt;/a&gt;:&lt;/strong&gt; Well done sir! But If I can I never use follicles , follicles comes with a crazy loads of features from hair system which require extra computation , of course It all depends how many you need but 99% of the time I use custom rivets I wrote both for mesh and nurbs surface so I am sure It s only doing the task is supposed to. But again well done the script is really userfull for people that cannot rely on&amp;nbsp;plugins&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#67" title="2013-05-06 23:24:48"&gt;Chris Lesage&lt;/a&gt;:&lt;/strong&gt; Thanks Brad! I had never noticed the Popup Menus option there! That is a nice way to quickly build up some flexible menus, without getting into designing a little &lt;span class="caps"&gt;UI&lt;/span&gt; or popup&amp;nbsp;dialog.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#66" title="2013-05-02 03:14:58"&gt;Brad Clark&lt;/a&gt;:&lt;/strong&gt; This is a great little script and a perfect tool to use this shelf #rigtip with. I took the code, added a double click to run the single follicles build and then added some right click options to add diffrent set of follicles to selected surface. https://vimeo.com/45485411 Thanks for the script Chris, Hope you are&amp;nbsp;well.&lt;/p&gt;</summary><category term="maya"></category><category term="pymel"></category><category term="python"></category><category term="rigtip"></category><category term="techart"></category><category term="tutorials"></category></entry><entry><title>How To Stop Collapsing Vertices in Maya Post Normalization</title><link href="http://chris-lesage.github.io/character-rigging/how-to-stop-collapsing-vertices-in-maya-post-normalization/" rel="alternate"></link><published>2012-05-14T16:52:00-04:00</published><author><name>Chris Lesage</name></author><id>tag:chris-lesage.github.io,2012-05-14:character-rigging/how-to-stop-collapsing-vertices-in-maya-post-normalization/</id><summary type="html">&lt;p&gt;&lt;img alt="&amp;lt;img src=" src="http://chrislesage.com/wp-content/uploads/2012/05/collapsed_vertices.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;So this is annoying. You are trying to paint weights in Maya using Post Normalization and a bunch of your vertices are collapsing to the origin! &lt;strong&gt;What&amp;#8217;s going&amp;nbsp;on!?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Don&amp;#8217;t fret. There is a simple explanation and an easy fix for this. But first, let&amp;#8217;s look at what Post skinning is&amp;nbsp;doing: &lt;/p&gt;
&lt;h3&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;What is this Post Normalization skinning all&amp;nbsp;about?&amp;#8221;&lt;/h3&gt;
&lt;p&gt;When using Post Normalization skinning for the first time, it can be a bit tricky to figure out how things are working. Basically Maya is taking the total of all the weights and then normalizing it to 1.0. With classic interactive skinning this is done &lt;em&gt;while you paint&lt;/em&gt;, which means if you paint on &lt;strong&gt;Influence A&lt;/strong&gt;, Maya automatically steals weights away from &lt;strong&gt;Influence B&lt;/strong&gt; and &lt;strong&gt;Influence C&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you are &lt;strong&gt;subtracting weights&lt;/strong&gt;, it automatically tries to add weights to other joints. This can be very buggy and throw weights&amp;nbsp;unpredictably.&lt;/p&gt;
&lt;p&gt;With Post Normalization, Maya is keeping all the weights you&amp;#8217;ve painted and doing this calculation on the fly. It stores the values of your weights &lt;strong&gt;without changing any of the others&lt;/strong&gt;. You can paint all the way up to 1.0 on Influence A, Influence B and Influence C. Maya averages it out and the final effect is 0.333 on all 3 influences, but the weights are still painted to 1.0. This can be a great way to think of your weights as separate layers. &lt;strong&gt;It&amp;#8217;s like a bunch of overlapping venn diagrams&lt;/strong&gt;. &lt;/p&gt;
&lt;h3&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;So what is happening in that ugly&amp;nbsp;image?&amp;#8221;&lt;/h3&gt;
&lt;p&gt;What you are seeing is essentially a divide-by-zero error. When you first encounter these collapsing vertices, you might think it is a bug and dismiss Post Normalization as garbage or confusing. But it has a simple explanation. Since Maya isn&amp;#8217;t automatically changing any weights, if you can paint all the weights to 1, you can also paint them all to 0. Maya is trying to calculate the totals of the weights but when there are no weights to divvy up, it simply can&amp;#8217;t make the&amp;nbsp;calculation.&lt;/p&gt;
&lt;h3&gt;How To Fix&amp;nbsp;It&lt;/h3&gt;
&lt;p&gt;Luckily there is an easy fix. What I do is create an extra joint called &amp;#8220;base_influence&amp;#8221; and place it anywhere in the middle of my character or at origin. Next, flood the entire character geometry with 0.05 weight on&amp;nbsp;&amp;#8220;base_influence&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Now you can paint the rest of your joints freely, but this one will always hold a tiny little bit of weight to prevent collapsing. Lastly, don&amp;#8217;t forget to constrain this &amp;#8220;base_influence&amp;#8221; to your characters root joint or root controller so it follows when you move the&amp;nbsp;character. &lt;/p&gt;
&lt;h3&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Why use it if it is so&amp;nbsp;confusing?&amp;#8221;&lt;/h3&gt;
&lt;p&gt;It took me a while to get used to, but I use Post Normalization skinning all the time now. You get to think in layers. Smoothing and subtracting weights is bug-free. You just have to get used to the fact that if you are painting Influence A, you have to manually paint away any overlapping influence on Influence B, or you will never reach full&amp;nbsp;influence.&lt;/p&gt;
&lt;h3&gt;Another&amp;nbsp;Alternative&lt;/h3&gt;
&lt;p&gt;I haven&amp;#8217;t had time to test this tool out yet. If you are interested in advanced skinning techniques and painting in layers, this sounds like a promising tool worth checking out: &lt;a href="http://www.ngskintools.com/"&gt;ngSkin Tools&lt;/a&gt; developed by Viktoras Makauskas. It sounds like Viktoras is developing something which solves a lot of the common frustrations with a Maya skinning workflow. It also uses regular skinning nodes, so it can also be a solution to video game riggers if Post Normalization isn&amp;#8217;t an option for your&amp;nbsp;engine.&lt;/p&gt;
&lt;p&gt;If you have any skinning tricks and techniques, please let me know in the comments or share your wisdom on &lt;a href="http://twitter.com/chrislesage"&gt;Twitter&lt;/a&gt; with the #rigtip&amp;nbsp;hashtag.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#65" title="2013-03-01 07:31:10"&gt;Alex Bone&lt;/a&gt;:&lt;/strong&gt; thank you so much, this is great&amp;nbsp;advice&lt;/p&gt;</summary><category term="maya"></category><category term="rigging"></category><category term="rigtip"></category><category term="skinning"></category></entry><entry><title>Using a Unit Vector to Make a Cylindrical Foot Roll</title><link href="http://chris-lesage.github.io/character-rigging/using-a-unit-vector-to-make-a-cylindrical-foot-roll/" rel="alternate"></link><published>2012-04-03T02:42:00-04:00</published><author><name>Chris Lesage</name></author><id>tag:chris-lesage.github.io,2012-04-03:character-rigging/using-a-unit-vector-to-make-a-cylindrical-foot-roll/</id><summary type="html">&lt;p&gt;Here is a tutorial that will demonstrate how to use a Unit Vector to animate the pivot point of a cylinder so that the cylinder will roll on its bottom edge in any direction. I&amp;#8217;m using this technique for the feet of my &lt;a href="http://chrislesage.com/series/making-of-mini-mammoth/"&gt;Mini Mammoth rig&lt;/a&gt;, but it could also be useful for robot feet, or adapted into different shapes for a variety of&amp;nbsp;uses.&lt;/p&gt;
&lt;p&gt;Here is a video of the foot rolling effect we are going to&amp;nbsp;create:&lt;/p&gt;
&lt;iframe width="560" height="315" src="http://www.youtube.com/embed/aSecO4KFjNw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;Note: Be aware that my expression syntax may or may not play nicely with Wordpress, depending on how you are viewing this post. I have included a Maya 2012 scene file at the bottom of this post so you can download it and follow along. The final expression is included as a text&amp;nbsp;file.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes about this&amp;nbsp;tutorial:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I am using locators as vectors so we can see what is going on. Once we are done prototyping this as an expression we can transform it into node connections that work directly with the attribute data rather than a daisy-chain of connected locators. This tutorial will just show the expression so you can get the&amp;nbsp;idea.&lt;/li&gt;
&lt;li&gt;The order of the lines in your expression matters. Specifically, the foot&amp;#8217;s rotation attributes will have to be animated before the pivots are translated in the expression. Otherwise I&amp;#8217;ve found that you will sometimes get strange results. If your animation seems to jump or skip, keep this in&amp;nbsp;mind.&lt;/li&gt;
&lt;li&gt;For simplicity, the way I build this ignores rotation in Y. Instead when I go to integrate this into a real rig, I&amp;#8217;ll group this entire foot roll rig underneath a parent node and use that to rotate in Y in global&amp;nbsp;space.&lt;/li&gt;
&lt;li&gt;The next step you could take would be to project the vector onto a curve using a closestPoint constraint. Shape the curve to match your character&amp;#8217;s foot, and now you can have a foot roll in any shape you&amp;nbsp;want!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;So let&amp;#8217;s get&amp;nbsp;started&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Create a cylinder with a radius of 5 and move it up so that it rests at the ground&amp;nbsp;plane.&lt;/li&gt;
&lt;li&gt;Create a joint at the bottom of the cylinder. Group the joint and call the group &amp;#8220;foot_pivot&amp;#8221;. The group will be controlled by the expression. Skin the cylinder to the&amp;nbsp;joint.&lt;/li&gt;
&lt;li&gt;Create a &amp;#8220;foot_roll&amp;#8221; controller. This can be a locator or a curve icon or whatever. This is the controller that will rotate the foot.
&lt;img alt="&amp;lt;img src=" src="http://chrislesage.com/wp-content/uploads/2012/04/cylinder_roll_step1-3.jpg" /&gt;&lt;/li&gt;
&lt;li&gt;Create two locators. Name the first one &amp;#8220;vector1&amp;#8221; and the second one&amp;nbsp;&amp;#8220;normalized_vector1&amp;#8221;.&lt;/li&gt;
&lt;li&gt;Select the &amp;#8220;foot_pivot&amp;#8221; group. Go into Edit -&amp;gt; Channel Control and in the Nonkeyable Hidden column make the following visible and keyable:
&lt;pre&gt;
Rotate Pivot X, Rotate Pivot Y, Rotate Pivot Z
Rotate Pivot Translate X, Rotate Pivot Translate Y, Rotate Pivot Translate Z
&lt;/pre&gt;
&lt;img alt="&amp;lt;img src=" src="http://chrislesage.com/wp-content/uploads/2012/03/cylinder_roll_step5.jpg" /&gt;&lt;/li&gt;
&lt;li&gt;The first step is to turn the rotation of the &amp;#8220;foot_roll&amp;#8221; control into &lt;span class="caps"&gt;XZ&lt;/span&gt; translation which we will feed into the pivot point of &amp;#8220;foot_pivot&amp;#8221;.
&lt;pre&gt;
vector1.translateX = -foot_pivot.rotateZ;
vector1.translateZ = foot_pivot.rotateX;
// (note the negative value. This may change for you depending
// on your controllers orientation.)
&lt;/pre&gt;
&lt;img alt="&amp;lt;img src=" src="http://chrislesage.com/wp-content/uploads/2012/03/anim_vector.gif" /&gt;
When you rotate the &amp;#8220;foot_roll&amp;#8221; now &amp;#8220;vector1&amp;#8221; will travel along the ground plane pointing in the direction of the rotation. But the distance from the foot is wrong and it is not in a circular shape.&amp;nbsp;So&amp;#8230;&lt;/li&gt;
&lt;li&gt;We arrive at the meat of this entire tutorial. To get a useful pivot we need to create a &lt;strong&gt;Unit Vector&lt;/strong&gt; or a normalized vector which will always have the same length of 1 no matter which direction it is pointing.&lt;br&gt;&lt;br&gt;If you aren&amp;#8217;t familiar with vectors, this would be the same as having a 1-bone &lt;span class="caps"&gt;IK&lt;/span&gt; chain. As you move the effector around, the chain points in the correct direction, but stays the same length.&lt;br&gt;&lt;br&gt;However, if you aren&amp;#8217;t familiar with vectors, I highly suggest learning about them. They will open up a new world of ideas for you as a rigger or &lt;span class="caps"&gt;TD&lt;/span&gt;.
&lt;a href="http://www.rtrowbridge.com/blog/2012/03/442/"&gt;http://www.rtrowbridge.com/blog/2012/03/442/&lt;/a&gt;
&lt;img alt="&amp;lt;img src=" src="http://chrislesage.com/wp-content/uploads/2012/03/unit_vectors_ahoy.jpg" /&gt;
&lt;br&gt;We&amp;#8217;ll use the built-in unit() vector function in the Expression Editor. Later if you want to rebuild it with nodes, you can get the same functionality with the vectorProduct node and turning &amp;#8220;Normalize output&amp;#8221; to &lt;span class="caps"&gt;ON&lt;/span&gt;.
&lt;pre&gt;
vector $norm = unit(&amp;lt;&lt;vector1.translateX,vector1.translateY,vector1.translateZ&gt;&amp;gt;);
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Now we have a vector, so let&amp;#8217;s drive the &amp;#8220;normalized_vector&amp;#8221; locator so we can see what it is doing. (We don&amp;#8217;t need to use the Y-component.)
&lt;pre&gt;
normalized_vector1.translateX = $norm.x
normalized_vector1.translateZ = $norm.z
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Ok, but now the problem is that our foot radius is 5 units and the Unit Vector is only 1 unit long. So let&amp;#8217;s create a variable to multiply the unit vector which will be easy to edit if we need to use it on different sized cylinders. We add the following to the expression:
&lt;pre&gt;
float $radius = 5.0;
normalized_vector1.translateX = $norm.x * $radius;
normalized_vector1.translateZ = $norm.z * $radius;
&lt;/pre&gt;
Now the &amp;#8220;normalized_vector1&amp;#8221; should be travelling in a circle around our foot as we rotate&amp;nbsp;&amp;#8220;foot_roll&amp;#8221;.&lt;/li&gt;
&lt;li&gt;Now this normalized vector is just for visualization or debugging purposes. Let&amp;#8217;s connect that straight into the rotatePivotX and rotatePivotZ attributes of the &amp;#8220;foot_pivot&amp;#8221;. (the group that parents the foot joint.)
&lt;pre&gt;
foot_pivot.rotatePivotX = $norm.x * $radius;
foot_pivot.rotatePivotZ = $norm.z * $radius;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;And finally, rotate the &amp;#8220;foot_pivot&amp;#8221;. (Note that this will go at the top of the expression. Putting it at the bottom caused erratic behaviour for me.)
&lt;pre&gt;
foot_pivot.rotateX = foot_roll.rotateX;
foot_pivot.rotateY = 0;
foot_pivot.rotateZ = foot_roll.rotateZ;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Bring it all together and this is our final&amp;nbsp;expression:&lt;/h3&gt;
&lt;pre&gt;
// Rotate the pivot_rotator to match the controller
foot_pivot.rotateX = foot_roll.rotateX;
foot_pivot.rotateY = 0;
foot_pivot.rotateZ = foot_roll.rotateZ;
float $radius = 5.0;
// Turn the controller rotation into XZ translation
vector1.translateX = -foot_pivot.rotateZ;
vector1.translateZ = foot_pivot.rotateX;
// Normalize the vector
vector $norm = unit(&lt;&lt;vector1.translateX,vector1.translateY,vector1.translateZ&gt;&gt;);
// Use the normalized coordinates to set the position of norm_vector
normalized_vector1.translateX = $norm.x * $radius;
normalized_vector1.translateZ = $norm.z * $radius;
// Animate the pivot_rotator pivot point to match the normalized vector
foot_pivot.rotatePivotX = $norm.x * $radius;
foot_pivot.rotatePivotZ = $norm.z * $radius;
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;(This step is optional or could be done differently.)&lt;/em&gt; - Another thing I like to do is connect the &amp;#8220;foot_roll&amp;#8221; translation to the &amp;#8220;foot_pivot.rotatePivotTranslate&amp;#8221;. Then you can translate the &amp;#8220;foot_roll&amp;#8221; to create sliding effects in parent space. So even though the foot roll will be rotated, moving forward in Z will slide the foot along the ground all with one control&amp;nbsp;object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;**Update: &lt;a href="http://www.robotsquids.blogspot.ca/2013/09/sliding-pivot-foot-roll-tutorial.html"&gt;Armin Halac of Robot Squids has created a video tutorial&lt;/a&gt; showing how you can build a set up like this that lets use you an arbitrary foot shape using only Maya nodes. Make sure to &lt;a href="http://www.robotsquids.blogspot.ca/2013/09/sliding-pivot-foot-roll-tutorial.html" title="Maya foot roll tutorial"&gt;check out his foot roll tutorial here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt; Here is a scene file you can download (Maya&amp;nbsp;2012)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;d like to see the finished expression in action. The expression is included as a text file. &lt;a href="http://chrislesage.com/wp-content/uploads/2012/03/cylinder_roll_example_scene.zip"&gt;&lt;strong&gt;Download the finished, animated scene.&lt;/strong&gt;&lt;/a&gt; Let me know in the comments if you found this helpful or if I can explain anything more clearly. Thanks for&amp;nbsp;reading.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#28" title="2012-04-03 07:15:45"&gt;Ehsan &lt;span class="caps"&gt;HM&lt;/span&gt;&lt;/a&gt;:&lt;/strong&gt; Very creative Chris, Thanks for&amp;nbsp;sharing!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#78" title="2013-09-19 16:35:35"&gt;Chris Lesage&lt;/a&gt;:&lt;/strong&gt; Update: Armin Halac of Robot Squids has created a great video tutorial showing how you can set this up using Maya nodes, and with any arbitary foot shape:&amp;nbsp;http://www.robotsquids.blogspot.ca/2013/09/sliding-pivot-foot-roll-tutorial.html&lt;/p&gt;</summary><category term="rigging"></category><category term="maya"></category><category term="rigtip"></category><category term="math"></category></entry><entry><title>Use K to Easily Navigate Your Maya Timeline</title><link href="http://chris-lesage.github.io/tip-of-the-day/use-k-to-easily-navigate-your-maya-timeline/" rel="alternate"></link><published>2012-03-07T15:17:00-05:00</published><author><name>Chris Lesage</name></author><id>tag:chris-lesage.github.io,2012-03-07:tip-of-the-day/use-k-to-easily-navigate-your-maya-timeline/</id><summary type="html">&lt;p&gt;There are tons of features and hotkeys and hidden marking menus in Maya that are extremely useful but surprisingly seldom known. While everyone is talking about big new features, these underdogs can easily be&amp;nbsp;forgotten.&lt;/p&gt;
&lt;p&gt;I just started a &lt;em&gt;&amp;#8220;tip of the day&amp;#8221;&lt;/em&gt; with my animators at work because I realized that there are lot of these things that they aren&amp;#8217;t aware of, but being a major geek, I&amp;#8217;ve read through the help docs like a crime-thriller novel. (It turns out the Zoom Tool did it.) Today&amp;#8217;s was such a hit that I thought I&amp;#8217;d start posting some of the best ones&amp;nbsp;here.&lt;/p&gt;
&lt;h3&gt;Tip of the&amp;nbsp;day&lt;/h3&gt;
&lt;p&gt;Hold down &amp;#8216;K&amp;#8217; and drag in the viewport. Your timeline will scrub as if you were dragging down on the time slider. Middle-mouse drag and your characters will stay in place for copying keyframes. (Again, same as the time slider.) This also works in the graph editor and the dope&amp;nbsp;sheet.&lt;/p&gt;
&lt;h3&gt;Customize the&amp;nbsp;Hotkey&lt;/h3&gt;
&lt;p&gt;In the hotkey editor this feature can be found under Tools &amp;gt; TimeDraggerToolActivate. This means that you can map it to another key if you wish. You could also invoke the context in your own custom &lt;span class="caps"&gt;UI&lt;/span&gt;&amp;nbsp;tools.&lt;/p&gt;</summary><category term="animtip"></category><category term="hotkeys"></category><category term="maya"></category><category term="rigtip"></category></entry><entry><title>Mini Mammoth Part 3: Modelling and Topology in 3D-Coat</title><link href="http://chris-lesage.github.io/character-rigging/mini-mammoth-part-3-modelling-and-topology-in-3d-coat/" rel="alternate"></link><published>2012-03-05T16:28:00-05:00</published><author><name>Chris Lesage</name></author><id>tag:chris-lesage.github.io,2012-03-05:character-rigging/mini-mammoth-part-3-modelling-and-topology-in-3d-coat/</id><summary type="html">&lt;p&gt;&lt;img alt="" src="http://chrislesage.com/wp-content/uploads/2012/03/mini-mammoth-final-wireframe-render.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here is Part 3 of rigging Mini Mammoth&lt;/strong&gt;. I&amp;#8217;ve now got a finished model. This turned into a huge step, because I was learning a ton about modelling and topology in 3D-Coat, which turned into a 2-week long adventure of tutorials and manuals. I made a lot of mistakes as well which I&amp;#8217;ll talk a little bit about. All in the spirit of&amp;nbsp;learning!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is the last post before I get into the actual character&amp;nbsp;rigging.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First, I decided that I liked how the prototype model looked, so instead of starting from scratch, I began editing it. I started by carving out a mouth cavity and lowering the&amp;nbsp;eyes.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://chrislesage.com/wp-content/uploads/2012/03/mini-mammoth-mouth-modelling.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://chrislesage.com/wp-content/uploads/2012/03/mini-mammoth-wip-01.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://chrislesage.com/wp-content/uploads/2012/03/mini-mammoth-wip-02.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The funny thing about this entire process was that after I finished tediously making a change, I found a feature in 3D-Coat that makes it fast and&amp;nbsp;easy!&lt;/p&gt;
&lt;p&gt;For example, to change the eye, I filled in the eye sockets, transformed the eye geometry down, and then using the Sphere tool, gouged a new hole for the eye sockets.. After that, I learned that you can create a low-resolution cache, make changes and then propagate those changes back to the high-resolution voxels. This lets you make big changes to the structure of your model without destroying the finer details. (Otherwise, if you just move things around, you&amp;#8217;ll tend to get a mushy mess.) I could have done this and used the move tool to lower the eyes very&amp;nbsp;quickly.&lt;/p&gt;
&lt;p&gt;In fact, using the low-proxy cache is a good workflow for modelling non-linearly, because even after you have details, you can change proportions and posing. I&amp;#8217;ve started doing this now, and it has loosened me up a lot. It is also far faster to edit, because it is lower&amp;nbsp;resolution.&lt;/p&gt;
&lt;p&gt;Another example, after I took all these screenshots with different angles, I found out that you can save camera angles. That would have been better for the comparison shots in the topology stages below. It would also be good for making animated gifs of time-lapse&amp;nbsp;progress.&lt;/p&gt;
&lt;p&gt;Next, I made a few changes to the nose and ears to make the edges look a bit more hard and defined. I also removed the tail and the eyebrows. (I&amp;#8217;ll add those separately&amp;nbsp;later.)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://chrislesage.com/wp-content/uploads/2012/03/mini-mammoth-wip-03.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;Mesh&amp;nbsp;Retopology&lt;/h3&gt;
&lt;p&gt;I decided to call it done and moved on to the Retopo tool for creating my polygon topology. This was an exciting stage, because I wasn&amp;#8217;t aware until a few months ago that tools like these existed. Modelling used to be a relatively tedious process, and now it feels very artistic in comparison. (I would also like to try ZBrush&amp;nbsp;someday.)&lt;/p&gt;
&lt;p&gt;The concept here is that you have your voxel model underneath, and you are adding polygons on top to the surface. So you can use the auto-tools or just draw polygons&amp;nbsp;manually.&lt;/p&gt;
&lt;p&gt;I did a few experiments and followed a couple of tutorials, but I was new to this. The best part about this tool is that it is iterative. You create a few &amp;#8220;suggestion strokes&amp;#8221; and then run the tool and see what you get as a result. If it is very messy, you just delete the polygons and run it again. (Or keep the polygons and stitch them together from various&amp;nbsp;layers.)&lt;/p&gt;
&lt;p&gt;Different patterns of suggestion strokes results in different mesh topology. Orange lines are closed loops, and green lines are directional indicators. The dark area indicates where you want more density. Eventually, I rested on the 3rd iteration&amp;nbsp;below: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://chrislesage.com/wp-content/uploads/2012/03/mini-mammoth-edgeloops-01.jpg" /&gt;
&lt;img alt="" src="http://chrislesage.com/wp-content/uploads/2012/03/mini-mammoth-edgeloops-result-01.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://chrislesage.com/wp-content/uploads/2012/03/mini-mammoth-edgeloops-02.jpg" /&gt;
&lt;img alt="" src="http://chrislesage.com/wp-content/uploads/2012/03/mini-mammoth-edgeloops-result-02.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://chrislesage.com/wp-content/uploads/2012/03/mini-mammoth-edgeloop-03.jpg" /&gt;
&lt;img alt="" src="http://chrislesage.com/wp-content/uploads/2012/03/mini-mammoth-edgeloops-result-03.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Now at first glance that might look pretty clean, but there are several 5-sided polys, triangles and a whole bunch of spiral edge-rings. The legs were especially problematic. So with the results as a starting point, there is some clean-up to&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;This is the stage where I wasted the most&amp;nbsp;time!&lt;/p&gt;
&lt;p&gt;At this point I wasn&amp;#8217;t sure how many polys to use. In hindsight it turns out I was using too many, because it is very easy to sub-divide later. It made editing more cumbersome. I was sliding edges around one-by-one, deleting and merging polys and then hitting &amp;#8220;Relax&amp;#8221; to smooth out the results. When you hit &amp;#8220;Relax&amp;#8221;, sometimes things you don&amp;#8217;t want to move will shift around and warp. So slowly, my edge-rings around the legs were drifting and getting&amp;nbsp;crooked.&lt;/p&gt;
&lt;p&gt;After a long tedious session of these types of edits (which by the way were a &lt;span class="caps"&gt;JOY&lt;/span&gt; compared to the old way I used to model years ago.) I found two powerful features that I had&amp;nbsp;missed:&lt;/p&gt;
&lt;p&gt;1. The &amp;#8220;Brush&amp;#8221; tool. How did I miss this!? It is brilliant. Using the brush tool, you can slide regions of vertices around. The beauty of it is that it stays adhered to the voxel surface below, so you can really get loose and messy. Hold down shift (as with most tools in 3D-Coat) and you can relax and smooth the vertices, again while sticking to the surface. This solved my drifting problem with the Relax tool and made the whole process 40X easier! (give or take a few&amp;nbsp;X&amp;#8217;s.)&lt;/p&gt;
&lt;p&gt;2. You can delete polygons and use the Strokes tool manually. I thought the Strokes tool was only part of the Auto-Retopo tools. With that in mind, I deleted and rebuilt the eye region, to get a better round edge-loop structure on the&amp;nbsp;face.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://chrislesage.com/wp-content/uploads/2012/03/mini-mammoth-wip-04.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;So yadda yadda yadda&amp;#8230; I kept doing these edits, especially around the mouth and legs and now I have a finished body model with 6892 faces. There is still a weird portion on the inside of the leg where the polys are running a bit diagonally and might cause artifacting, but I am going to test in Maya before I bother spending too much time to fix it. We might never see it. All in all, I&amp;#8217;m happy with everything I learned and I know I could model more characters even&amp;nbsp;faster. &lt;/p&gt;
&lt;h3&gt;The&amp;nbsp;Result:&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="http://chrislesage.com/wp-content/uploads/2012/03/mini-mammoth-final-01.jpg" /&gt;
&lt;img alt="" src="http://chrislesage.com/wp-content/uploads/2012/03/mini-mammoth-final-02.jpg" /&gt;
&lt;img alt="" src="http://chrislesage.com/wp-content/uploads/2012/03/mini-mammoth-final-03.jpg" /&gt;
&lt;img alt="" src="http://chrislesage.com/wp-content/uploads/2012/03/mini-mammoth-final-04.jpg" /&gt;
&lt;img alt="" src="http://chrislesage.com/wp-content/uploads/2012/03/mini-mammoth-final-05.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;Next Step: Export to Maya for&amp;nbsp;Rigging&lt;/h3&gt;
&lt;p&gt;With a nice clean mesh, I think it will be possible to create some great squash-and-stretch cartoony effects. I&amp;#8217;ll save the &lt;span class="caps"&gt;UV&lt;/span&gt; unwrapping for later. (This is another easy tool in 3D-Coat.) The next step is to begin doing some rig tests and prototyping. There is a chance I&amp;#8217;ll have to make some&amp;nbsp;changes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Will the geometry deform properly? (quick skinning&amp;nbsp;tests)&lt;/li&gt;
&lt;li&gt;Should the trunk have been modelled straight? (I might still have to fix&amp;nbsp;this.)&lt;/li&gt;
&lt;li&gt;Prototype a cylindrical auto foot-roll, which can roll in any&amp;nbsp;direction.&lt;/li&gt;
&lt;li&gt;Model small details like tongue, tail, teeth and eyebrows. (and possibly some tufts of fur and other&amp;nbsp;details.)&lt;/li&gt;
&lt;li&gt;Create some nicer, asymmetrical&amp;nbsp;tusks.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="3d-modelling"></category><category term="3d-coat"></category><category term="character-design"></category><category term="rigging"></category></entry><entry><title>Python: String Formatting and Enumerate</title><link href="http://chris-lesage.github.io/python/python-string-formatting-and-enumerate/" rel="alternate"></link><published>2012-02-21T18:00:00-05:00</published><author><name>Chris Lesage</name></author><id>tag:chris-lesage.github.io,2012-02-21:python/python-string-formatting-and-enumerate/</id><summary type="html">&lt;p&gt;As a mostly self-taught Python scripter, I try to keep on top of best-practices and constantly learn, because I realize how easily bad habits can slip in. I&amp;#8217;ve recently learned these &lt;a href="http://www.robg3d.com/?p=933" title="doubly-mutable antipatterns"&gt;bad habits&lt;/a&gt; are known as &lt;a href="http://blog.sanctum.geek.nz/vim-anti-patterns/" title="vim-anti-patterns"&gt;anti-patterns&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That said, I learned a couple new Python tricks this&amp;nbsp;week.&lt;/p&gt;
&lt;h3&gt;1. Better String Formatting Using&amp;nbsp;Format()&lt;/h3&gt;
&lt;p&gt;If you&amp;#8217;ve used string formatting before, this is very similar, except the replacement fields are inside {} brackets, and you can use variables as keywords or an&amp;nbsp;index.&lt;/p&gt;
&lt;p&gt;examples:&lt;/p&gt;
&lt;pre&gt;print 'We are the {0} who say "{1}!"'.format('knights', 'Ni')
print 'We are the {1} who say "{0}!"'.format('Ni', 'knights')
print 'We are the {people} who say "{quote}!"'.format(people='knights', quote='Ni')
&lt;/pre&gt;

&lt;p&gt;There are also lots of examples of how to format numbers or create precise column spacing. The &amp;#8221; &lt;em&gt;old string formatting&lt;/em&gt;&amp;#8221; is eventually going to be removed from Python. There is likely no rush to switch, but it is less flexible and a bit harder to&amp;nbsp;read:&lt;/p&gt;
&lt;pre&gt;print 'We are the %s who say %s!' % ('knights', 'Ni')&lt;/pre&gt;

&lt;p&gt;source: &lt;a href="http://docs.python.org/tutorial/inputoutput.html"&gt;http://docs.python.org/tutorial/inputoutput.html&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;2. Looping With&amp;nbsp;Enumerate()&lt;/h3&gt;
&lt;p&gt;One of the common things you want when looping through things is an index counter. You can do this a few various ways: counter += 1 for i in range(): or you can use each.index() on array items. There is a better&amp;nbsp;way:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.python.org/dev/peps/pep-0279/" title="Python enumerate"&gt;Enumerate() is nice &lt;span class="caps"&gt;PEP&lt;/span&gt;-friendly way&lt;/a&gt; to get a &amp;#8220;a compact, readable, reliable index notation&amp;#8221; in loops. It works even when you don&amp;#8217;t have an array to count, or a known length (for doing a range()). You use two variables in your for loop, and the first is your index. It is much nicer than having a separate counter or measuring the length of something which may change inside the&amp;nbsp;loop.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(This is a PyMEL example in Maya and assumes you have a selection of&amp;nbsp;objects.)&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pymel.core&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pm&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;some&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;array&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;here&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3. Put Them&amp;nbsp;Together&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s do a simple example where we also use .format() to rename a series of objects. I&amp;#8217;ll use {1:02d} to automatically add frame-padding. {1:__} is the replacement field index. {__:02d} is the frame-padding. (You can also convert to percentages, hexadecimal, dates, change the column spacing, etc. etc. This is just one small&amp;nbsp;example.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
    &lt;span class="n"&gt;newName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{0}_{1:02d}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;right_whisker&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The nice thing about .format() is how easy it is to read and edit, since the replacement fields are clearly separated by brackets and you can pass any variables to them. Again this isn&amp;#8217;t new, but it is easier to read than the old string formatting. So let&amp;#8217;s play with this a bit and expand the example to automatically rename the object as &amp;#8220;left&amp;#8221; or &amp;#8220;right&amp;#8221;, depending on its translation in&amp;nbsp;X.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;side&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;left&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;side&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;right&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;newName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{0}_{1}_{2:02d}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;side&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;whisker&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the past, one of the most common ways I&amp;#8217;ve created an index count is by measuring a length of a list or array or by using .index() to return the index of an array item. In comparison, this looks very ugly now. Plus, if you were to delete some objects inside the loop, the length of your range might&amp;nbsp;change.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Two useful new tools for the arsenal. If you have any tips, suggestions or improvements, leave a comment. Next up, I&amp;#8217;ll be getting back to the Mini Mammoth rigging after a bit of a&amp;nbsp;hiatus.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#23" title="2012-02-22 00:05:36"&gt;Alexander Morano&lt;/a&gt;:&lt;/strong&gt; How does this work with the log_formatter strings? E.G.: _log_format = &amp;#8216;%(asctime)-9s %(levelname)-7s %(name)-40s %(message)s&amp;#8217; since that is a template, are the formatters for the logger class updated in 2.6-&amp;gt; ?&amp;nbsp;Cheers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#24" title="2012-02-22 01:59:52"&gt;Chris&lt;/a&gt;:&lt;/strong&gt; @Keir: Ah thanks. Yes it seems it very similar. I suppose the only advantage is the readability. @Alexander: That&amp;#8217;s a good question, but I&amp;#8217;m not sure since I use pymel&amp;#8217;s plogging module. There doesn&amp;#8217;t seem to be any word on format() in regards to log formatting does&amp;nbsp;there?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#22" title="2012-02-21 22:23:16"&gt;Keir&lt;/a&gt;:&lt;/strong&gt; The % based string substitution also has a couple of cool tricks. [code] print &amp;#8216;We are the %s who say &amp;#8220;%s!&amp;#8221;&amp;#8217; % (&amp;#8216;knights&amp;#8217;, &amp;#8216;Ni&amp;#8217;) print &amp;#8216;We are the %(people)s who say &amp;#8220;%(quote)!&amp;#8221;&amp;#8217; % {people:&amp;#8217;knights&amp;#8217;, quote:&amp;#8217;Ni&amp;#8217;} [\code] [code] people = &amp;#8216;knights&amp;#8217; quote = &amp;#8216;Ni&amp;#8217; print &amp;#8216;We are the %(people)s who say &amp;#8220;%(quote)!&amp;#8221;&amp;#8217; % locals()&amp;nbsp;[\code]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#25" title="2012-02-25 09:43:38"&gt;Rob Galanakis&lt;/a&gt;:&lt;/strong&gt; Good post but two problems: First is the for/if/else antipattern. You have a known case (each.tx.get() == 0), why are you testing? Pull the loop code into an inner function, call it for the explicit case, then call it for the loop case. Not only does for/if/else not perform well, it is difficult to read because it introduces an extra branch for every loop iteration, even though you should only have to think about the &amp;#8216;0 case&amp;#8217; logic once. Second is mutating a collection as you loop over it. Not only is this actually illegal with many structures (python dicts) and languages (like C#), it is a great way to write code that is incredibly difficult to understand, especially if, say, your collection is pymel nodes. There is never ever a reason to mutate within a loop. Assign things &amp;#8216;transactionally&amp;#8217; instead- that&amp;#8217;s a really loose usage of the word transaction, but I mean, just build up new structures and assign them to what you need to assign them to when&amp;nbsp;done.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#26" title="2012-02-25 15:05:48"&gt;Chris&lt;/a&gt;:&lt;/strong&gt; Awesome Rob, thanks for the great feedback. That makes total sense. I always find your blog and &lt;span class="caps"&gt;TAO&lt;/span&gt; posts very valuable to read and re-read. 2 years into Python I consider myself a beginner and you very often introduce concepts, rules and guidelines to which I was completely unaware. (Actually my real autorig code does explicitly call functions. This was just a quick contrived&amp;nbsp;example.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#298" title="2016-03-07 15:08:52"&gt;gr&lt;/a&gt;:&lt;/strong&gt; for i, item in enumerate(L): # &amp;#8230; compute some result based on item &amp;#8230; L[i] =&amp;nbsp;result&lt;/p&gt;</summary><category term="maya"></category><category term="pymel"></category><category term="python"></category><category term="tutorials"></category></entry><entry><title>Using Proxy Geometry For Better Skinning Results</title><link href="http://chris-lesage.github.io/character-rigging/using-proxy-geometry-for-better-skinning-results/" rel="alternate"></link><published>2012-02-10T16:07:00-05:00</published><author><name>Chris Lesage</name></author><id>tag:chris-lesage.github.io,2012-02-10:character-rigging/using-proxy-geometry-for-better-skinning-results/</id><summary type="html">&lt;p&gt;Here is a simple skinning trick I like to use, which comes in handy for a lot of different rigging&amp;nbsp;situations.&lt;/p&gt;
&lt;p&gt;In the images below, I was rigging a wolf&amp;#8217;s tongue with spline &lt;span class="caps"&gt;IK&lt;/span&gt; that needed to be very flexible. (If you count, you&amp;#8217;ll notice that there are 12 controllers. 4 main controllers and 8 extra offset controllers to bend and twist the tongue into a variety of shapes.) The skinning was proving to be tedious, because the geometry kept collapsing and self-colliding. So here is what I&amp;nbsp;did:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Scenario&lt;/strong&gt;: You have some tongue geometry (or other semi-flat geometry) which needs to be very flexible but the rig has a lot of bones and painting accurate weights is tedious and&amp;nbsp;error-prone!&lt;/p&gt;
&lt;p&gt;&lt;img src="http://chrislesage.com/wp-content/uploads/2012/02/wolf_tongue_colliding.jpg" alt="" title="wolf_tongue_colliding" width="360" height="312" class="size-full wp-image-185" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Look at that unsightly and embarrassing&amp;nbsp;interpenetration!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;: Use a poly plane or other simplified geometry as a proxy. Fit it inside the geometry, and skin that instead. When you are done painting, use Copy Skin Weights to copy the weights from the proxy geometry to the full&amp;nbsp;geometry.&lt;/p&gt;
&lt;p&gt;The settings I use for Copy Skin Weights&amp;nbsp;are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Surface Association: &lt;strong&gt;Closest point on&amp;nbsp;surface&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Influence Association 1: &lt;strong&gt;Closest&amp;nbsp;Joint&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Influence Association 2: &lt;strong&gt;Closest&amp;nbsp;Bone&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Influence Association 3: &lt;strong&gt;Name&lt;/strong&gt; (This 3rd entry is usually optional and makes no difference. When copying from the same geometry, like a body to a body, use &amp;#8220;One to One&amp;#8221;&amp;nbsp;instead.)&lt;/li&gt;
&lt;li&gt;Normalize: &lt;strong&gt;Not&amp;nbsp;checked&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="http://chrislesage.com/wp-content/uploads/2012/02/skinning_a_tongue_using_poly_plane.jpg" alt="" title="skinning_a_tongue_using_poly_plane" width="368" height="364" class="size-full wp-image-181" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Using a proxy object to skin the 3D&amp;nbsp;geometry&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="http://chrislesage.com/wp-content/uploads/2012/02/flexible_tongue_rig.jpg" alt="" title="flexible_tongue_rig" width="318" height="395" class="size-full wp-image-180" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The final result is fast and&amp;nbsp;flexible&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This makes it very easy for both sides of the tongue to have the same weighting, without tedious painting, which means it will twist and bend a lot further without self-colliding. When your geometry has a lot of folds and wrinkles it is also a lot easier to get your brush along the flat, uniform geometry of a plane. This technique also works in any 3D package which supports copying weights from one object to another. In &lt;span class="caps"&gt;XSI&lt;/span&gt; you can do the exact same thing using &lt;span class="caps"&gt;GATOR&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I have also used this technique to copy weights from a stretched sphere to weight complex hair geometry. You could also use it to copy weights from low-res geometry to high-res geometry. You will likely have to do a bit of cleaning up afterwards, but it could be a good way to get 90% of your weight painting done very&amp;nbsp;quickly.&lt;/p&gt;
&lt;p&gt;When you are done, you can simply delete the geometry, or tuck it away in a hidden group for later editing. My next goal with this is to figure out a way to copy weights locally on complex geometry. For example, if the tongue is attached to the body, how would you grab just the tongue&amp;nbsp;weights?&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#21" title="2012-02-14 16:14:58"&gt;Chris&lt;/a&gt;:&lt;/strong&gt; Ah cool! I didn&amp;#8217;t realize that. It works very well! If you needed to select very complex geometry or wanted to paint selection, I suppose you could create a script that would store your vertex selections, one object at a time, and then re-select them when you are ready to copy the weights. Thanks for the tip&amp;nbsp;Ehsan!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#19" title="2012-02-13 14:05:21"&gt;Matt Murray&lt;/a&gt;:&lt;/strong&gt; Sweet! Thanks for the tip&amp;nbsp;:D&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#20" title="2012-02-14 08:12:22"&gt;Ehsan &lt;span class="caps"&gt;HM&lt;/span&gt;&lt;/a&gt;:&lt;/strong&gt; Hi, Thanks for sharing dude. To copy weights locally on complex geometry, you could use the same technique but you should select the vertices of the destination geo. Selecting is a bit tricky though but you can select both geometries first and isolate them. select you proxy geo then hide it&amp;#8217;s display layer and shift select vertices of the destination geo. You might find an easier solution but this is what I came with so far and it works. :)&amp;nbsp;Cheers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#27" title="2012-03-09 16:35:40"&gt;Chris&lt;/a&gt;:&lt;/strong&gt; Another useful application: You can&amp;#8217;t (as far as I can tell) paint weights or smooth skin weights on a lattice. But you can definitely copy weights from geometry to a&amp;nbsp;lattice!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#40" title="2012-12-19 18:51:41"&gt;like&lt;/a&gt;:&lt;/strong&gt; Hi there! I could have sworn I’ve been to this site before but after looking at some of the articles I realized it’s new to me. Nonetheless, I’m definitely delighted I came across it and I’ll be book-marking it and checking back&amp;nbsp;often!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#85" title="2013-10-06 21:06:05"&gt;Armin Halac&lt;/a&gt;:&lt;/strong&gt; Hi Chris, very useful technique. Just saved me a ton of work on skinning an elephants ear.&amp;nbsp;Cheers!&lt;/p&gt;</summary><category term="rigging"></category><category term="maya"></category><category term="skinning"></category></entry><entry><title>Mini Mammoth Part 2: Sketching &amp; 3D Sculpting</title><link href="http://chris-lesage.github.io/character-rigging/mini-mammoth-part-2-sketching-3d-sculpting/" rel="alternate"></link><published>2012-01-23T18:10:00-05:00</published><author><name>Chris Lesage</name></author><id>tag:chris-lesage.github.io,2012-01-23:character-rigging/mini-mammoth-part-2-sketching-3d-sculpting/</id><summary type="html">&lt;p&gt;&lt;img alt="" src="http://chrislesage.com/wp-content/uploads/2012/01/mini-mammoth-walking.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;So now we are on to &lt;strong&gt;part 2 of the Making Of Mini Mammoth&lt;/strong&gt; where I am documenting the entire process of designing a cartoony character rig. In this step, I am doing a bunch of sketching from photo references and sculpting a quick prototype 3D model to get even more ideas. We&amp;#8217;re almost ready to start the actual modelling, but&amp;nbsp;first&amp;#8230;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Sketching Solves&amp;nbsp;Problems&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Design-based drawing is ultimately about solving problems, so quality isn&amp;#8217;t at all important compared to just looking and observing the&amp;nbsp;world.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Design sketches for Mini Mammoth" src="http://chrislesage.com/wp-content/uploads/2012/01/mini-mammoth-sketchsheet-001.jpg" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Design sketches for Mini&amp;nbsp;Mammoth&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;#8217;m not the best draftsman, and they are definitely not going to dedicate an Art-Of book to me just yet, but it is a very important step to visually work out all the things we&amp;#8217;ll have to pay attention to when we get to the character rigging stage. Drawing is also very important &lt;strong&gt;because it is fast&lt;/strong&gt;. You can collect a lot of ideas in a short period of time and end up surprising yourself with ideas you would not have thought of if you had been tempted to jump straight into&amp;nbsp;modelling.&lt;/p&gt;
&lt;p&gt;Even when I am coding Python tools, I often find it very helpful to draw out my ideas first. I constantly keep a notebook full of notes and doodles beside&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;At this point, I&amp;#8217;m just trying to get lots of ideas for shapes, style and proportions. This is one of the most fun steps because anything goes. I even spent some time drawing&amp;nbsp;bears.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Some more design sketches for Mini Mammoth" src="http://chrislesage.com/wp-content/uploads/2012/01/mini-mammoth-sketchsheet-002.jpg" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Some more design sketches for Mini&amp;nbsp;Mammoth&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Design Considerations So&amp;nbsp;Far:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The mammoth&amp;#8217;s trunk is mostly drawn in an interesting S shape, but I want it to be completely flexible and stretchy, including doing a water-passing-through-a-hose effect. So ultimately, I&amp;#8217;ll likely model it in a straight line. When making a rig, &lt;strong&gt;it is usually easier to bend straight geometry than it is to straighten bent geometry&lt;/strong&gt;. This is true when modelling any body part that will need to bend a lot, like a trunk, tongue or&amp;nbsp;tail.&lt;/li&gt;
&lt;li&gt;In some of the drawings I noticed that the tusks will overlap with the mouth, and it will be an important part of how the mouth looks. The trunk and tusks will &lt;em&gt;essentially be the upper lips&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;I&amp;#8217;ve learned that there are a wide variety of mammoth and elephant ears. I&amp;#8217;ll need to decide how floppy and how big they will&amp;nbsp;be.&lt;/li&gt;
&lt;li&gt;The long tusks of a mammoth make a really beautiful curve. This will be an important part to get&amp;nbsp;right.&lt;/li&gt;
&lt;li&gt;I am imagining giving him a thick coat of fur. How will I do it? There a few ways I could do it. Geometry, Maya hair, separate pieces of geometry? A lot to think&amp;nbsp;about.&lt;/li&gt;
&lt;li&gt;Did you know that &lt;a href="http://www.youtube.com/watch?v=PKWRCW7PYKw"&gt;elephants have a 3rd eyelid membrane that slides sideways as they blink&lt;/a&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Building a Prototype Model in&amp;nbsp;3D-Coat&lt;/h3&gt;
&lt;p&gt;My original sketch wasn&amp;#8217;t very detailed, and I wasn&amp;#8217;t sure if the shapes I was drawing were even possible in 3D! So I started to model a prototype in &lt;a href="http://3d-coat.com/"&gt;3D-Coat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="3D turntable of Mini Mammoth" src="http://chrislesage.com/wp-content/uploads/2012/01/mini-mammoth-turntable.gif" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A digital sculpt in&amp;nbsp;3D-Coat&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I really like how it turned out! At this point, I am just playing with shapes in 3D. &lt;em&gt;This is not a final model&lt;/em&gt;. A lot of details like the ears will still change a lot so I am not too worried about following the design so far. Its just a 3D&amp;nbsp;doodle.&lt;/p&gt;
&lt;p&gt;Digital voxel sculpting in 3D-Coat is a lot of fun! You are very free to push and pull your model and experiment. It feels as loose as drawing, the tools are very intuitive. You can even build an armature (The &amp;#8216;Curves&amp;#8217; tool) or drop shapes in (The &amp;#8216;Primitives&amp;#8217; tool) using spheres, squares and cylinders to build up a model very&amp;nbsp;quickly.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://chrislesage.com/wp-content/uploads/2012/01/3d-coat-armature.jpg" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Building an armature in&amp;nbsp;3D-Coat&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Immediately, I began to see some interesting patterns&amp;nbsp;emerge:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The legs are almost perfect cylinders. I like this a lot. They will bend and stretch, but their default shape will be very&amp;nbsp;simple.&lt;/li&gt;
&lt;li&gt;The trunk makes some really cool undulating waves all the way up to the top of the&amp;nbsp;head.&lt;/li&gt;
&lt;li&gt;The eyebrows need more design work so they don&amp;#8217;t look like Groucho Marx. (Though that could be fun too!) Right now he looks angry in a lot of the drawings, but he&amp;#8217;ll have a wider range of expressions when I design the facial&amp;nbsp;rigging.&lt;/li&gt;
&lt;li&gt;I like how the foundation of Mini Mammoth is a simple egg shape. But I also started getting some interesting square shapes in the hindquarters. I will hint at real anatomy in the&amp;nbsp;pelvis.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The&amp;nbsp;Lessons&lt;/h2&gt;
&lt;h4&gt;#1. Always use&amp;nbsp;references.&lt;/h4&gt;
&lt;p&gt;I started out drawing a lot of sketches from my imagination, but the ones I sketched while looking at references of other animals were the ones that solved the most problems and made the design more clear in my&amp;nbsp;mind.&lt;/p&gt;
&lt;p&gt;As I said earlier; drawing for design is a problem-solving process. At this point, it is not about creating art. The more I drew from references, the more I realized things that I would have to think about during the modelling and rigging&amp;nbsp;stages.&lt;/p&gt;
&lt;h4&gt;#2. Don&amp;#8217;t Limit Your&amp;nbsp;Inspiration&lt;/h4&gt;
&lt;p&gt;I was looking at one of my drawings and it reminded me of a bear walking. So I studied a few pictures of bears. A bear has a big, lumbering walk with shorter legs than an elephant (just like Mini Mammoth.) So when I go to create a walk cycle, I&amp;#8217;ll be largely inspired by bears. Mini Mammoth might look very small but he is going to walk with a big, heavy, camera-shaking&amp;nbsp;gait!&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://chrislesage.com/wp-content/uploads/2012/01/bear-walking-reference1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://chrislesage.com/wp-content/uploads/2012/01/mini-mammoth-3d-prototype.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Coming Up&amp;nbsp;Next:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll finalize the design, make a couple of polished drawings, and then go back to 3D-Coat to start the actual modelling. After that, I&amp;#8217;ll go through the auto re-topology of the model (an amazing feature of 3D-Coat which generates the polygon edge-loops) and create the texture &lt;span class="caps"&gt;UV&lt;/span&gt;&amp;#8217;s for preparing the model to export into&amp;nbsp;Maya. &lt;/p&gt;
&lt;p&gt;Until&amp;nbsp;then!&lt;/p&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#18" title="2012-01-27 17:15:45"&gt;Chris&lt;/a&gt;:&lt;/strong&gt; Thanks Lisa. Nice to hear from you. I look forward to getting into the actual rigging and bringing this guy to&amp;nbsp;life.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="#17" title="2012-01-27 17:04:22"&gt;Lisa Doucet&lt;/a&gt;:&lt;/strong&gt; Chris, I loved reading your lesson. I find it &lt;span class="caps"&gt;VERY&lt;/span&gt; interesting how you manage to break it down into bite-size morsels. I look forward to reading more&amp;nbsp;!&lt;/p&gt;</summary><category term="3d-coat"></category><category term="character-design"></category><category term="rigging"></category><category term="sketches"></category></entry><entry><title>Mini Mammoth Part 1: The Making Of A Cartoon Character Rig</title><link href="http://chris-lesage.github.io/character-rigging/mini-mammoth-part-1-the-making-of-a-cartoon-character-rig/" rel="alternate"></link><published>2012-01-17T03:50:00-05:00</published><author><name>Chris Lesage</name></author><id>tag:chris-lesage.github.io,2012-01-17:character-rigging/mini-mammoth-part-1-the-making-of-a-cartoon-character-rig/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Hi everyone. This is the first post in a series where I take this simple doodle of a cartoon&amp;nbsp;mammoth:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://chrislesage.com/wp-content/uploads/2012/01/mini-mammoth-first-sketch.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;#8230;and turn him into a fully animated, super-flexible cartoony character rig in&amp;nbsp;Maya!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll be documenting the entire process from design and modelling to the creation of the entire rig. It won&amp;#8217;t be a step-by-step tutorial, but it will show my entire thought process as I rig, mistakes and all. It might get messy, but I know I&amp;#8217;ll learn a lot and hopefully you will&amp;nbsp;too.&lt;/p&gt;
&lt;p&gt;This isn&amp;#8217;t the full &amp;#8220;design&amp;#8221;. That will come a bit later. Right now it is just a quick 3-inch doodle that I sketched while at work. I am choosing this funny little character for a few reasons, because it will be especially challenging in a few&amp;nbsp;ways: &lt;/p&gt;
&lt;h4&gt;The&amp;nbsp;Challenge&lt;/h4&gt;
&lt;p&gt;1. The challenge of small cartoony rigs is that there is lots of overlapping influence between the different body parts. Take a look at this&amp;nbsp;image.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://chrislesage.com/wp-content/uploads/2012/01/mini-mammoth-design-considerations.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;For example, the cavity of the mouth and the shape of the lips is going to overlap all the way down to his knees. So when he opens his mouth his legs are going to move! His head is so big in relation to his body that he is basically a walking face. When rigging a normal-sized human or creature, all the body parts are distinct and separate and it is easier to paint the influence. So I am going to have to very carefully consider how I do everything from the facial rig to the way the limbs bend the&amp;nbsp;body.&lt;/p&gt;
&lt;p&gt;2. I am going to design him so that he has a lot of exaggerated squash and stretch. His trunk will stretch, bulge and grab on to things. How will such a short little trunk grab things? We will&amp;nbsp;see!&lt;/p&gt;
&lt;p&gt;3. It will just be a lot of fun figuring out how to make this guy move in an appealing and believable&amp;nbsp;way! &lt;/p&gt;
&lt;h4&gt;The End&amp;nbsp;Result?&lt;/h4&gt;
&lt;p&gt;The end result will be an animated short, featuring &amp;#8220;Mini Mammoth&amp;#8221;. I am not sure yet if I am going to texture and render it, but we will see! Stay&amp;nbsp;tuned!&lt;/p&gt;</summary><category term="character-design"></category><category term="rigging"></category><category term="sketches"></category></entry></feed>